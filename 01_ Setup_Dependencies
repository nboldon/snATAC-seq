#!/bin/bash

# Step 2: Setup Download Dependencies for GSE154068 ATAC-seq Pipeline
# Configures SRA tools and download utilities within existing cellranger_atac environment

set -euo pipefail

# Configuration
ENV_NAME="cellranger_atac"
TEST_SRR="SRR12182284"  # Small test sample for validation

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_environment() {
    echo "======================================================"
    echo "GSE154068 Download Dependencies Setup"
    echo "======================================================"
    echo "Host: $(hostname)"
    echo "OS: $(uname -s)"
    echo ""
    
    print_status "Checking current environment..."
    
    # Check if we're in the correct conda environment
    if [[ "${CONDA_DEFAULT_ENV:-}" == "$ENV_NAME" ]]; then
        print_success "Using conda environment: $ENV_NAME"
        return 0
    elif command -v conda &> /dev/null; then
        print_warning "Not in $ENV_NAME environment. Attempting to activate..."
        eval "$(conda shell.bash hook)"
        conda activate "$ENV_NAME" 2>/dev/null || {
            print_error "Failed to activate $ENV_NAME environment"
            print_error "Please run: conda activate $ENV_NAME"
            return 1
        }
        print_success "Activated conda environment: $ENV_NAME"
        return 0
    fi
    
    # Check if we're on HPC with module system
    if command -v module &> /dev/null; then
        print_status "HPC module system detected"
        return 2
    fi
    
    print_error "Neither conda environment $ENV_NAME nor HPC modules found"
    return 1
}

setup_hpc_modules() {
    print_status "Setting up HPC modules..."
    
    # Try common HPC module names
    local modules_to_try=("sra-toolkit" "SRA-Toolkit" "sratoolkit" "ncbi-sra-tools")
    local loaded_modules=()
    
    for module_name in "${modules_to_try[@]}"; do
        if module load "$module_name" 2>/dev/null; then
            print_success "Loaded: $module_name"
            loaded_modules+=("$module_name")
            break
        fi
    done
    
    # Try wget/curl modules if not available
    for tool in wget curl parallel; do
        if ! command -v "$tool" &> /dev/null; then
            if module load "$tool" 2>/dev/null; then
                print_success "Loaded: $tool"
                loaded_modules+=("$tool")
            fi
        fi
    done
    
    if [[ ${#loaded_modules[@]} -gt 0 ]]; then
        print_success "HPC modules loaded successfully"
        echo ""
        print_status "Add these to your job script or .bashrc:"
        for mod in "${loaded_modules[@]}"; do
            echo "   module load $mod"
        done
        return 0
    else
        print_error "No suitable HPC modules found"
        print_status "Try: module avail | grep -i sra"
        return 1
    fi
}

setup_conda_packages() {
    print_status "Installing additional packages in conda environment..."
    
    eval "$(conda shell.bash hook)"
    conda activate "$ENV_NAME"
    
    # Check if sra-tools is already installed
    if command -v fasterq-dump &> /dev/null; then
        print_success "SRA tools already available"
    else
        print_status "Installing SRA tools..."
        conda install -c bioconda -c conda-forge -y \
            sra-tools \
            parallel \
            pigz || {
            print_warning "Failed to install via conda, trying manual installation"
            return 1
        }
    fi
    
    # Ensure other tools are available
    local missing_tools=()
    for tool in wget curl gzip gunzip; do
        if ! command -v "$tool" &> /dev/null; then
            missing_tools+=("$tool")
        fi
    done
    
    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        print_status "Installing missing tools: ${missing_tools[*]}"
        conda install -c conda-forge -y "${missing_tools[@]}" || {
            print_error "Failed to install missing tools"
            return 1
        }
    fi
    
    print_success "Conda packages configured"
    return 0
}

configure_sra_toolkit() {
    print_status "Configuring SRA toolkit..."
    
    # Create SRA configuration directory if it doesn't exist
    local sra_config_dir="$HOME/.ncbi"
    mkdir -p "$sra_config_dir"
    
    # Configure SRA toolkit to disable automatic downloading to user-repository
    cat > "$sra_config_dir/user-settings.mkfg" << 'EOF'
## auto-generated configuration file - DO NOT EDIT ##

/LIBS/GUID = "$(uuidgen)"
/config/default = "false"
/repository/user/ad/public/apps/file/volumes/flat = "."
/repository/user/ad/public/apps/refseq/volumes/refseqvol = "."
/repository/user/ad/public/apps/sra/volumes/sraFlat = "."
/repository/user/ad/public/apps/sraPileup/volumes/ad = "."
/repository/user/ad/public/apps/sraRealign/volumes/ad = "."
/repository/user/ad/public/root = "."
/tools/prefetch/download_to_cache = "false"
/tools/sra-pileup/use_quality = "true"
EOF

    print_success "SRA toolkit configured"
}

test_installation() {
    print_status "Testing installation..."
    
    local tools=("wget" "curl" "gunzip" "gzip")
    local sra_tools=("fasterq-dump" "fastq-dump" "prefetch")
    local optional_tools=("parallel" "pigz")
    
    local essential_missing=()
    local sra_available=false
    local optional_missing=()
    
    # Test essential tools
    for tool in "${tools[@]}"; do
        if command -v "$tool" &> /dev/null; then
            print_success "$tool: $(which $tool)"
        else
            essential_missing+=("$tool")
            print_error "$tool: Not found"
        fi
    done
    
    # Test SRA tools
    for tool in "${sra_tools[@]}"; do
        if command -v "$tool" &> /dev/null; then
            print_success "$tool: $(which $tool)"
            sra_available=true
        else
            print_warning "$tool: Not found"
        fi
    done
    
    # Test optional tools
    for tool in "${optional_tools[@]}"; do
        if command -v "$tool" &> /dev/null; then
            print_success "$tool: $(which $tool)"
        else
            optional_missing+=("$tool")
            print_warning "$tool: Not found (optional)"
        fi
    done
    
    echo ""
    
    # Summary
    if [[ ${#essential_missing[@]} -eq 0 ]]; then
        print_success "Essential tools are available"
    else
        print_error "Missing essential tools:"
        printf '   - %s\n' "${essential_missing[@]}"
        return 1
    fi
    
    if [[ "$sra_available" == true ]]; then
        print_success "SRA toolkit is available"
    else
        print_warning "SRA toolkit not found - will use direct download methods"
    fi
    
    if [[ ${#optional_missing[@]} -eq 0 ]]; then
        print_success "All optional tools are available"
    else
        print_status "Missing optional tools (pipeline will work without them):"
        printf '   - %s\n' "${optional_missing[@]}"
    fi
    
    return 0
}

create_test_script() {
    print_status "Creating download test script..."
    
    cat > test_download.sh << 'EOF'
#!/bin/bash

# Test download capabilities for GSE154068 pipeline
# Tests both SRA toolkit and direct download methods

set -euo pipefail

TEST_SRR="SRR12182284"
TEST_DIR="download_test"

print_status() {
    echo -e "\033[0;34m[INFO]\033[0m $1"
}

print_success() {
    echo -e "\033[0;32m[SUCCESS]\033[0m $1"
}

print_error() {
    echo -e "\033[0;31m[ERROR]\033[0m $1"
}

echo "Testing download capability with $TEST_SRR..."
echo "=============================================="

# Create test directory
rm -rf "$TEST_DIR"
mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

# Test 1: SRA toolkit if available
if command -v fasterq-dump &> /dev/null; then
    print_status "Testing fasterq-dump (SRA toolkit)..."
    
    # Test with limited reads to speed up testing
    if timeout 300 fasterq-dump "$TEST_SRR" --split-files --max-reads 1000 2>/dev/null; then
        print_success "SRA toolkit download working"
        
        # Check output files
        if ls ${TEST_SRR}*.fastq 1>/dev/null 2>&1; then
            print_success "FASTQ files created:"
            ls -lh ${TEST_SRR}*.fastq
        else
            print_error "No FASTQ files found"
        fi
        
        # Cleanup SRA test files
        rm -f ${TEST_SRR}*.fastq
    else
        print_error "SRA toolkit test failed or timed out"
    fi
    echo ""
else
    print_status "SRA toolkit not available, skipping test"
    echo ""
fi

# Test 2: Direct download from ENA
print_status "Testing direct download from ENA FTP..."

# Try different ENA FTP paths
ena_urls=(
    "ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR121/084/$TEST_SRR/${TEST_SRR}.fastq.gz"
    "ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR121/084/$TEST_SRR/${TEST_SRR}_1.fastq.gz"
)

download_success=false
for url in "${ena_urls[@]}"; do
    print_status "Trying: $url"
    if timeout 60 wget -t 2 -T 30 -q "$url" -O "test_download.fastq.gz" 2>/dev/null; then
        if [[ -f "test_download.fastq.gz" && $(wc -c < "test_download.fastq.gz") -gt 1000 ]]; then
            print_success "Direct download working"
            print_success "Downloaded file size: $(ls -lh test_download.fastq.gz | awk '{print $5}')"
            download_success=true
            break
        else
            print_error "Downloaded file is too small or empty"
        fi
    else
        print_error "Download failed: $url"
    fi
done

if [[ "$download_success" == false ]]; then
    print_error "All direct download methods failed"
else
    # Test gzip decompression
    print_status "Testing gzip decompression..."
    if gunzip -t "test_download.fastq.gz" 2>/dev/null; then
        print_success "Downloaded file is valid gzip"
        
        # Show first few lines
        print_status "Sample content:"
        zcat "test_download.fastq.gz" | head -8
    else
        print_error "Downloaded file is not valid gzip"
    fi
fi

# Cleanup
cd ..
rm -rf "$TEST_DIR"

echo ""
if [[ "$download_success" == true ]] || command -v fasterq-dump &> /dev/null; then
    print_success "Download test completed - ready for data pipeline!"
else
    print_error "Download test failed - check network connectivity and try again"
    exit 1
fi
EOF
    
    chmod +x test_download.sh
    print_success "Test script created: test_download.sh"
}

create_usage_guide() {
    print_status "Creating usage guide..."
    
    cat > download_setup_guide.md << 'EOF'
# GSE154068 Download Dependencies Setup

## What was installed

### Core tools:
- **SRA Toolkit**: For downloading FASTQ files from NCBI SRA
  - `fasterq-dump`: Fast parallel FASTQ extraction
  - `prefetch`: Pre-download SRA files for faster processing
- **wget/curl**: For direct downloads from ENA/other sources
- **parallel**: For parallel processing (optional but recommended)
- **pigz**: For fast gzip compression/decompression (optional)

### Configuration:
- SRA toolkit configured to avoid caching issues
- Conda environment integrated with existing cellranger_atac setup

## Usage

### Activate environment:
```bash
conda activate cellranger_atac
```

### Test setup:
```bash
./test_download.sh
```

### Download methods available:

1. **SRA Toolkit** (preferred for large datasets):
   ```bash
   fasterq-dump SRR12182284 --split-files --threads 4
   ```

2. **Direct download from ENA**:
   ```bash
   wget "ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR121/084/SRR12182284/SRR12182284.fastq.gz"
   ```

3. **Parallel processing** (if parallel is available):
   ```bash
   parallel -j 4 fasterq-dump {} --split-files ::: SRR1 SRR2 SRR3
   ```

## Troubleshooting

### SRA toolkit issues:
- If downloads hang: Check ~/.ncbi/user-settings.mkfg configuration
- If out of space: SRA toolkit is configured to download to current directory
- For network issues: Try prefetch first, then fasterq-dump

### Direct download issues:
- ENA FTP occasionally has timeouts - retry with different servers
- Some samples may only be available as paired-end (_1.fastq.gz, _2.fastq.gz)

## Integration with main pipeline

This setup ensures the main GSE154068 download script will have all required tools.
The pipeline expects to create: `./fastq-split_results/` directory structure.
EOF

    print_success "Usage guide created: download_setup_guide.md"
}

main() {
    local setup_result
    
    # Check and setup environment
    if check_environment; then
        setup_result=0
    elif [[ $? -eq 2 ]]; then
        # HPC system
        setup_hpc_modules
        setup_result=$?
    else
        exit 1
    fi
    
    # If conda environment, install additional packages
    if [[ $setup_result -eq 0 ]] && [[ "${CONDA_DEFAULT_ENV:-}" == "$ENV_NAME" ]]; then
        setup_conda_packages || {
            print_warning "Conda package installation had issues, but continuing..."
        }
    fi
    
    # Configure SRA toolkit
    configure_sra_toolkit
    
    # Test installation
    echo ""
    if test_installation; then
        print_success "All tests passed"
    else
        print_error "Some tests failed - check output above"
        exit 1
    fi
    
    # Create test script and documentation
    echo ""
    create_test_script
    create_usage_guide
    
    echo ""
    echo "======================================================"
    print_success "Download dependencies setup completed!"
    echo "======================================================"
    echo ""
    echo "Next steps:"
    echo "1. Test the setup: ./test_download.sh"
    echo "2. Read the guide: cat download_setup_guide.md"
    echo "3. Run your main download script for GSE154068"
    echo ""
    echo "Environment ready for:"
    echo "- FASTQ downloads from SRA/ENA"
    echo "- Parallel processing"
    echo "- Integration with Cell Ranger ATAC pipeline"
}

main "$@"
