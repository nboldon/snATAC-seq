#!/bin/bash

# Step 3: Build mm10 Reference Genome for Cell Ranger ATAC
# Creates custom mm10 reference compatible with Cell Ranger ATAC 2.1.0
# Based on Ensembl genome and GENCODE annotations

set -euo pipefail

# Configuration
GENOME="mm10"
VERSION="2020-A"
BUILD_DIR="${GENOME}-${VERSION}_build"
SOURCE_DIR="reference_sources"
ENV_NAME="cellranger_atac"

# URLs for source files
FASTA_URL="http://ftp.ensembl.org/pub/release-98/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz"
GTF_URL="http://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M23/gencode.vM23.primary_assembly.annotation.gtf.gz"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_prerequisites() {
    echo "======================================================"
    echo "mm10 Reference Genome Builder for Cell Ranger ATAC"
    echo "======================================================"
    echo "Genome: $GENOME"
    echo "Version: $VERSION"
    echo "Build directory: $BUILD_DIR"
    echo ""
    
    # Check if we're on Linux (required for cellranger-atac mkref)
    if [[ "$(uname -s)" != "Linux" ]]; then
        print_error "Cell Ranger ATAC mkref only runs on Linux systems"
        print_status "Current OS: $(uname -s)"
        exit 1
    fi
    
    # Check conda environment
    if [[ "${CONDA_DEFAULT_ENV:-}" != "$ENV_NAME" ]]; then
        print_warning "Not in $ENV_NAME environment"
        if command -v conda &> /dev/null; then
            print_status "Activating $ENV_NAME environment..."
            eval "$(conda shell.bash hook)"
            conda activate "$ENV_NAME" || {
                print_error "Failed to activate $ENV_NAME environment"
                exit 1
            }
        else
            print_error "Conda not available and not in correct environment"
            exit 1
        fi
    fi
    
    # Check for cellranger-atac
    if ! command -v cellranger-atac &> /dev/null; then
        print_error "cellranger-atac not found in PATH"
        print_status "Please ensure Cell Ranger ATAC is installed and in PATH"
        exit 1
    fi
    
    print_success "Prerequisites check passed"
}

setup_directories() {
    print_status "Setting up build directories..."
    
    # Create directories
    mkdir -p "$SOURCE_DIR" "$BUILD_DIR"
    
    print_success "Directories created:"
    print_status "  Source: $SOURCE_DIR"
    print_status "  Build: $BUILD_DIR"
}

download_source_files() {
    print_status "Downloading source files..."
    
    local fasta_file="$SOURCE_DIR/Mus_musculus.GRCm38.dna.primary_assembly.fa"
    local gtf_file="$SOURCE_DIR/gencode.vM23.primary_assembly.annotation.gtf"
    
    # Download FASTA if not present
    if [[ ! -f "$fasta_file" ]]; then
        print_status "Downloading Ensembl FASTA..."
        if curl -fsSL "$FASTA_URL" | gunzip > "$fasta_file"; then
            print_success "FASTA downloaded: $(basename "$fasta_file")"
        else
            print_error "Failed to download FASTA file"
            exit 1
        fi
    else
        print_success "FASTA file already exists: $(basename "$fasta_file")"
    fi
    
    # Download GTF if not present
    if [[ ! -f "$gtf_file" ]]; then
        print_status "Downloading GENCODE GTF..."
        if curl -fsSL "$GTF_URL" | gunzip > "$gtf_file"; then
            print_success "GTF downloaded: $(basename "$gtf_file")"
        else
            print_error "Failed to download GTF file"
            exit 1
        fi
    else
        print_success "GTF file already exists: $(basename "$gtf_file")"
    fi
    
    # Verify file integrity
    print_status "Verifying file integrity..."
    
    # Check FASTA
    if grep -q "^>" "$fasta_file" && [[ $(wc -l < "$fasta_file") -gt 1000 ]]; then
        print_success "FASTA file appears valid"
    else
        print_error "FASTA file appears corrupted"
        rm -f "$fasta_file"
        exit 1
    fi
    
    # Check GTF
    if grep -q "^#" "$gtf_file" && grep -q -E "\tgene\t" "$gtf_file"; then
        print_success "GTF file appears valid"
    else
        print_error "GTF file appears corrupted"
        rm -f "$gtf_file"
        exit 1
    fi
    
    # Show file sizes
    print_status "File sizes:"
    ls -lh "$fasta_file" "$gtf_file"
}

process_fasta() {
    print_status "Processing FASTA file for Cell Ranger ATAC compatibility..."
    
    local fasta_in="$SOURCE_DIR/Mus_musculus.GRCm38.dna.primary_assembly.fa"
    local fasta_out="$BUILD_DIR/$(basename "$fasta_in").modified"
    
    print_status "Modifying chromosome names to match GENCODE format..."
    
    # Modify sequence headers to match GENCODE format
    # This is crucial for Cell Ranger ATAC compatibility
    cat "$fasta_in" | sed -E '
        # Add chromosome identifier as second field for primary contigs
        s/^>([0-9]+|[XYM]|MT) .*/>\1 \1/
        # Convert numbered chromosomes to chr format
        s/^>([0-9]+) />\1 chr\1/
        # Convert X, Y to chr format  
        s/^>(X|Y) />\1 chr\1/
        # Convert MT/M to chrM
        s/^>(MT?) />chrM chrM/
        # Keep other sequences as-is but add identifier
        /^>[0-9XYM]|^>MT|^>chrM/!{
            s/^>([^ ]+).*/>\1 \1/
        }
    ' > "$fasta_out"
    
    print_success "FASTA processed: $(basename "$fasta_out")"
    
    # Verify the modification worked
    print_status "Chromosome naming verification:"
    grep "^>" "$fasta_out" | head -10
    
    local chr_count=$(grep "^>chr" "$fasta_out" | wc -l)
    print_status "Chromosomes with 'chr' prefix: $chr_count"
}

process_gtf() {
    print_status "Processing GTF file..."
    
    local gtf_in="$SOURCE_DIR/gencode.vM23.primary_assembly.annotation.gtf"
    local gtf_modified="$BUILD_DIR/$(basename "$gtf_in").modified"
    local gtf_filtered="$BUILD_DIR/$(basename "$gtf_in").filtered"
    
    print_status "Removing version suffixes from gene/transcript IDs..."
    
    # Remove version suffixes from Ensembl IDs
    # This makes the GTF compatible with Cell Ranger ATAC
    local ID_PATTERN="(ENS(MUS)?[GTE][0-9]+)\.([0-9]+)"
    
    sed -E "
        s/gene_id \"$ID_PATTERN\";/gene_id \"\1\"; gene_version \"\3\";/g
        s/transcript_id \"$ID_PATTERN\";/transcript_id \"\1\"; transcript_version \"\3\";/g  
        s/exon_id \"$ID_PATTERN\";/exon_id \"\1\"; exon_version \"\3\";/g
    " "$gtf_in" > "$gtf_modified"
    
    print_success "GTF IDs processed: $(basename "$gtf_modified")"
    
    print_status "Creating gene allowlist for Cell Ranger ATAC..."
    
    # Define biotype patterns for genes suitable for ATAC-seq analysis
    local BIOTYPE_PATTERN="(protein_coding|lncRNA|IG_C_gene|IG_D_gene|IG_J_gene|IG_LV_gene|IG_V_gene|IG_V_pseudogene|IG_J_pseudogene|IG_C_pseudogene|TR_C_gene|TR_D_gene|TR_J_gene|TR_V_gene|TR_V_pseudogene|TR_J_pseudogene)"
    local GENE_PATTERN="gene_type \"$BIOTYPE_PATTERN\""
    local TX_PATTERN="transcript_type \"$BIOTYPE_PATTERN\""
    local READTHROUGH_PATTERN="tag \"readthrough_transcript\""
    
    # Extract allowed genes
    awk '$3 == "transcript"' "$gtf_modified" | \
    grep -E "$GENE_PATTERN" | \
    grep -E "$TX_PATTERN" | \
    grep -Ev "$READTHROUGH_PATTERN" | \
    sed -E 's/.*(gene_id "[^"]+").*/\1/' | \
    sort | uniq > "$BUILD_DIR/gene_allowlist"
    
    local gene_count=$(wc -l < "$BUILD_DIR/gene_allowlist")
    print_success "Gene allowlist created with $gene_count genes"
    
    print_status "Filtering GTF to allowed genes only..."
    
    # Create filtered GTF with only allowed genes
    {
        grep -E "^#" "$gtf_modified"
        grep -Ff "$BUILD_DIR/gene_allowlist" "$gtf_modified"
    } > "$gtf_filtered"
    
    local filtered_lines=$(grep -v "^#" "$gtf_filtered" | wc -l)
    print_success "Filtered GTF created with $filtered_lines annotation lines"
    
    # Show some statistics
    print_status "Gene type distribution:"
    grep -v "^#" "$gtf_filtered" | awk '$3 == "gene"' | \
    grep -o 'gene_type "[^"]*"' | sort | uniq -c | sort -nr | head -10
}

build_reference() {
    print_status "Building Cell Ranger ATAC reference..."
    
    local fasta_file="$BUILD_DIR/Mus_musculus.GRCm38.dna.primary_assembly.fa.modified"
    local gtf_file="$BUILD_DIR/gencode.vM23.primary_assembly.annotation.gtf.filtered"
    local ref_name="refdata-cellranger-atac-${GENOME}-${VERSION}"
    
    # Remove existing reference if present
    if [[ -d "$ref_name" ]]; then
        print_warning "Existing reference found. Removing..."
        rm -rf "$ref_name"
    fi
    
    print_status "Running cellranger-atac mkref..."
    print_status "This may take 30-60 minutes depending on system performance..."
    
    # Build reference
    if cellranger-atac mkref \
        --ref-version="$VERSION" \
        --genome="$GENOME" \
        --fasta="$fasta_file" \
        --genes="$gtf_file"; then
        
        print_success "Reference genome built successfully!"
        print_success "Output directory: $ref_name"
        
        # Show reference contents
        print_status "Reference contents:"
        ls -la "$ref_name/"
        
        # Show reference size
        local ref_size=$(du -sh "$ref_name" | cut -f1)
        print_status "Reference size: $ref_size"
        
    else
        print_error "cellranger-atac mkref failed"
        exit 1
    fi
}

create_usage_info() {
    print_status "Creating usage information..."
    
    local ref_name="refdata-cellranger-atac-${GENOME}-${VERSION}"
    
    cat > reference_info.txt << EOF
mm10 Cell Ranger ATAC Reference Information
==========================================

Reference Name: $ref_name
Genome: $GENOME
Version: $VERSION
Build Date: $(date)

Usage in Cell Ranger ATAC:
--------------------------
cellranger-atac count \\
    --id=sample_name \\
    --reference=$PWD/$ref_name \\
    --fastqs=/path/to/fastqs \\
    --sample=sample_name

Integration with Pipeline:
-------------------------
Set this in your analysis scripts:
REFERENCE_PATH="$PWD/$ref_name"

Source Files Used:
-----------------
FASTA: $FASTA_URL
GTF: $GTF_URL

Processing Applied:
------------------
- Chromosome names modified for GENCODE compatibility
- Gene IDs de-versioned for Cell Ranger compatibility  
- Gene allowlist created excluding readthrough transcripts
- Only protein-coding and immunoglobulin genes included

Quality Control:
---------------
Total genes in reference: $(grep -c "^>" "$ref_name/fasta/genome.fa" 2>/dev/null || echo "N/A")
Chromosomes included: $(grep "^>" "$ref_name/fasta/genome.fa" 2>/dev/null | wc -l || echo "N/A")

EOF
    
    print_success "Reference information saved to reference_info.txt"
}

cleanup_build_files() {
    print_status "Cleaning up intermediate files..."
    
    # Keep source files but remove build intermediates
    if [[ -d "$BUILD_DIR" ]]; then
        print_status "Removing build directory: $BUILD_DIR"
        rm -rf "$BUILD_DIR"
    fi
    
    print_success "Build cleanup completed"
}

verify_reference() {
    print_status "Verifying reference integrity..."
    
    local ref_name="refdata-cellranger-atac-${GENOME}-${VERSION}"
    
    # Check essential files exist
    local required_files=(
        "$ref_name/fasta/genome.fa"
        "$ref_name/genes/genes.gtf"
        "$ref_name/reference.json"
    )
    
    local missing_files=()
    for file in "${required_files[@]}"; do
        if [[ -f "$file" ]]; then
            print_success "Found: $file"
        else
            missing_files+=("$file")
            print_error "Missing: $file"
        fi
    done
    
    if [[ ${#missing_files[@]} -eq 0 ]]; then
        print_success "Reference verification passed"
        return 0
    else
        print_error "Reference verification failed - missing files"
        return 1
    fi
}

main() {
    # Pre-flight checks
    check_prerequisites
    
    # Setup
    setup_directories
    
    # Download source files
    download_source_files
    
    # Process files
    process_fasta
    process_gtf
    
    # Build reference
    build_reference
    
    # Verify and document
    verify_reference
    create_usage_info
    
    # Cleanup
    cleanup_build_files
    
    echo ""
    echo "======================================================"
    print_success "mm10 reference build completed successfully!"
    echo "======================================================"
    echo ""
    echo "Reference location: refdata-cellranger-atac-${GENOME}-${VERSION}"
    echo "Usage info: reference_info.txt"
    echo ""
    echo "Ready for Cell Ranger ATAC analysis!"
}

main "$@"
