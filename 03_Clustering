# Load Project 2
projP_2 <- loadArchRProject(path="_")


## Dimensionality Reduction using Iterative LSI
# Creates a reducedDims object called "IterativeLSI"


projP_2 <- addIterativeLSI(
	ArchRProj=projP_2,
	useMatrix="TileMatrix",
	name="IterativeLSI",
	iterations=2,
	clusterParams=list (
	resolution=c(0.8),
	sampleCells=10000,
	n.start=10
	),
	varFeatures=25000,
	dimsToUse=1:30
	)


# Identified 19 clusters


##################


## Reduce parallel processing and memory load to remedy errors, for ex:

# Clear memory and reduce threading
gc()
addArchRThreads(threads = 1)  # Use single thread

# Try with reduced parameters to minimize file I/O
projP_2 <- addIterativeLSI(
  ArchRProj = projP_2,
  useMatrix = "TileMatrix", 
  name = "IterativeLSI",
  iterations = 2,              # Reduce to 1 iteration to test
  clusterParams = list(
    resolution = c(0.2),
    sampleCells = 10000,        # Reduce sample size if needed
    n.start = 10
  ),
  varFeatures = 15000,         # Reduce number of features
  dimsToUse = 1:20,            # Reduce dimensions
  force = TRUE
)



#####################################################


## In addition to Iterative LSI for batch corrections,
# Harmony can also be used as a batch correction tool. 


projP_2 <- addHarmony(
	ArchRProj=projP_2,
	reducedDims="IterativeLSI",
	name="Harmony",
	groupBy="Sample"
)



#####################################################


## Clustering using Seurat's FindClusters() function


projP_2 <- addClusters(
	input=projP_2,
	reducedDims="Harmony",
	method="Seurat",
	name="Clusters",
	resolution=0.8
)

head(projP_2$Clusters)
table(projP_2$Clusters)


#  C  C1  C10  C11  C12  C13  C14  C15  C16  C17  C18  C19   C2  C20  C21  C22  C23 
# 1236  273 2196  447  139  260 1733 1979  161 4191 2057 2582 2026  416  147  400 
#  C3   C4   C5   C6   C7   C8   C9 
# 811   62  129  518  770  328  518 



#####################################################


## Uniform Manifold Appreciation Maps (UMAPs)


projP_2 <- addUMAP(
	ArchRProj=projP_2,
	reducedDims="IterativeLSI",
	name="UMAP",
	nNeighbors=30,
	minDist=0.5,
	metric="cosine"
)


################


## To color UMAP by sample


p1 <- plotEmbedding(
	ArchRProj=projP_2,
	colorBy="cellColData",
	name="Sample",
	embedding="UMAP"
)


## To color UMAP by clusters


p2 <- plotEmbedding(
        ArchRProj=projP_2,
        colorBy="cellColData",
        name="Clusters",
        embedding="UMAP"
)


plotPDF(p1, p2,
	name="UMAP_by_Sample_Clusters.pdf",
	ArchRProj=projP_2,
	addDOC=FALSE,
	width=5, height=5)


# To visualize the plots side by side
ggAlignPlots(p1,p2,type="h")



#####################################################


# To run a t-Stocastic Neighbor Embedding (tSNE)

projP_2 <- addTSNE(
	ArchRProj = projP_2,
	reducedDims = "IterativeLSI",
	name = "TSNE",
	perplexity = 30,
	seed = 1
)


#To plot the tSNE (the same parameters apply to colorBy and name regardless of the type of embedding used)

p1 <- plotEmbedding(
	ArchRProj = projP_2,
	colorBy = "cellColData",
	name = "Sample",
	embedding = "TSNE"
)

p2 <- plotEmbedding(
	ArchRProj = projP_2,
	colorBy = "cellColData",
	name = "Clusters",
	embedding = "TSNE"
)

ggAlignPlots(p1, p2, type = "h")

plotPDF(p1,p2, name = "TSNE-Sample-Clusters.pdf", ArchRProj = projP_2, addDOC = FALSE, width = 5, height = 5)



####################################################



## Dimensionality reduction after Harmony for UMAP

# Used to assess the effects of Harmony by visualizing the embedding using UMAP or tSNE and comparing this to the embeddings visualized previously for iterative LSI.
# Repeat the UMAP embedding with the same parameters but for the "Harmony" reduced Dims object


projP_2 <- addUMAP(
	ArchRProj = projP_2,
	reducedDims = "Harmony",
	name = "UMAPHarmony",
	nNeighbors = 30,
	minDist = 0.5, 
	metric = "cosine",
	seed = 1
)

p3 <- plotEmbedding( 
	ArchRProj = projP_2,
	colorBy = "cellColData", 
	name = "Sample",
	embedding = "UMAPHarmony"
)

p4 <- plotEmbedding(
	ArchRProj = projP_2,
	colorBy = "cellColData",
	name = "Clusters",
	embedding = "UMAPHarmony"
)

ggAlignPlots(p3, p4, type = "h")

plotPDF(p1,p2,p3,p4, name = "UMAP_Harmony_by_Sample_Clusters.pdf", ArchRProj = projP_2, addDOC = FALSE, width = 5, height = 5)


##############


# Dimensionality reduction after Harmony for tSNE

# Follow similar steps to those used for UMAP


projP_2 <- addTSNE(
        ArchRProj = projP_2,
        reducedDims = "Harmony",
        name = "TSNEHarmony",
        perplexity = 30,
        seed = 1
)

p3 <- plotEmbedding(
        ArchRProj = projP_2,
        colorBy = "cellColData",
        name = "Sample",
        embedding = "TSNEHarmony"
)

p4 <- plotEmbedding(
        ArchRProj = projP_2,
        colorBy = "cellColData",
        name = "Clusters",
        embedding = "TSNEHarmony"
)

ggAlignPlots(p3, p4, type = "h")

plotPDF(p1,p2,p3,p4, name = "TSNE_Harmony_by_Sample_Clusters.pdf", ArchRProj = projP_2, addDOC = FALSE, width = 5, height = 5)



#####################################################
#####################################################
#####################################################


## Gene scores and marker genes


markerGS <- getMarkerFeatures(
	ArchRProj = projP_2,
	useMatrix = "GeneScoreMatrix",
	groupBy = "Clusters",
	bias = c("TSSEnrichment", "log10(nFrags)"),
	testMethod = "wilcoxon"
)

markerList <- getMarkers(markerGS, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")


# Marker list by cluster
markerList$C6


markerList.markers <- data.frame(getMarkers(markerGS, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25"))



for(i in names(markerList)) {
	write.csv(markerList[[i]], file = paste(i, ".csv", sep = ""))
}



#####################################################
#####################################################
#####################################################



##Use MAGIC to impute gene scores by smoothing signal across nearby cells

#Impute weights to the ArchRProject
projP_2 <- addImputeWeights(projP_2)



#####################################################
#####################################################
#####################################################


## Save projP_2

saveArchRProject(ArchRProj = projP_2, outputDirectory = "/project/eon/Protocol_Paper/Save-ProjP_2", load = FALSE)



#####################################################
#####################################################
#####################################################
