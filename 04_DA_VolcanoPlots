
#####################################################
#####################################################
#####################################################


## Differential Gene Accessibility between samples by cluster
## WITH CLUSTER-SPECIFIC VOLCANO PLOTS (WORKING VERSION)


#####################################################
# SETUP: Rename samples and create sample_cluster identifier
#####################################################

# Get the current sample names
sample <- projP_3$Sample

# Rename samples to simpler names
sample <- gsub("cortex_fresh_v1", "sample1", sample)
sample <- gsub("cortex_v1-1_chromx", "sample2", sample)
sample <- gsub("cortex_v2_chromx", "sample3", sample)
sample <- gsub("cortex_v2_cont", "sample4", sample)

# Check the renaming worked
unique(sample)

# Add to the project
projP_3$sample <- sample

# Verify it's there
table(projP_3$sample)

# Create a combined sample_cluster identifier
projP_3$sample_cluster <- paste0(projP_3$sample, "_", projP_3$Clusters)

# Check what combinations exist
table(projP_3$sample_cluster)

# Get all unique clusters
all_clusters <- unique(projP_3$Clusters)
print(all_clusters)


#####################################################
# Helper function to find common clusters between two samples
#####################################################

get_common_clusters <- function(sample1_name, sample2_name) {
  sample1_combinations <- unique(projP_3$sample_cluster[projP_3$sample == sample1_name])
  sample2_combinations <- unique(projP_3$sample_cluster[projP_3$sample == sample2_name])
  
  # Extract cluster names
  sample1_clusters <- gsub(paste0(sample1_name, "_"), "", sample1_combinations)
  sample2_clusters <- gsub(paste0(sample2_name, "_"), "", sample2_combinations)
  
  # Find common clusters
  common <- intersect(sample1_clusters, sample2_clusters)
  return(common)
}


#####################################################
# Load required library
#####################################################

library(ggplot2)

# Close any open devices before starting
while(dev.cur() > 1) dev.off()


#####################################################
# Sample1 vs Sample2 - by cluster with volcano plots
#####################################################

common_clusters_s1s2 <- get_common_clusters("sample1", "sample2")
print(paste("Common clusters between sample1 and sample2:", paste(common_clusters_s1s2, collapse=", ")))

if(length(common_clusters_s1s2) > 0) {
  
  for(cluster in common_clusters_s1s2) {
    
    print(paste("Processing cluster:", cluster))
    
    # SUBSET by cluster first
    clusterSubset <- projP_3[projP_3$Clusters %in% cluster]
    
    # Run marker test on the SUBSET using "sample" grouping
    markerTest_cluster <- getMarkerFeatures(
      ArchRProj = clusterSubset,
      useMatrix = "GeneScoreMatrix",
      groupBy = "sample",
      testMethod = "wilcoxon",
      bias = c("TSSEnrichment", "log10(nFrags)"),
      useGroups = "sample1",
      bgdGroups = "sample2"
    )
    
    # Get markers for CSV
    markerList_cluster <- getMarkers(markerTest_cluster, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")
    
    if("sample1" %in% names(markerList_cluster)) {
      cluster_markers <- markerList_cluster[["sample1"]]
      
      if(nrow(cluster_markers) > 0) {
        # Save CSV
        write.csv(cluster_markers, 
                  file = paste0("sample1_vs_sample2_", cluster, "_markers.csv"), 
                  row.names = TRUE)
        
        print(paste("  Markers found:", nrow(cluster_markers)))
        
        # Extract ALL results for volcano plot
        all_results <- getMarkers(markerTest_cluster, cutOff = "FDR <= 1")
        
        if("sample1" %in% names(all_results)) {
          volcano_data <- all_results[["sample1"]]
          
          if(nrow(volcano_data) > 10) {
            
            volcano_data$Significant <- ifelse(
              volcano_data$FDR <= 0.1 & abs(volcano_data$Log2FC) >= 0.5,
              "Significant",
              "Not Significant"
            )
            
            pv <- ggplot(volcano_data, aes(x = Log2FC, y = -log10(FDR), color = Significant)) +
              geom_point(alpha = 0.6, size = 1.5) +
              scale_color_manual(values = c("Not Significant" = "grey50", "Significant" = "red")) +
              geom_hline(yintercept = -log10(0.1), linetype = "dashed", color = "blue", linewidth = 0.5) +
              geom_vline(xintercept = c(-0.5, 0.5), linetype = "dashed", color = "blue", linewidth = 0.5) +
              labs(
                title = paste0("Sample1 vs Sample2 - ", cluster),
                x = "Log2 Fold Change",
                y = "-Log10(FDR)",
                subtitle = paste0(nrow(cluster_markers), " significant markers")
              ) +
              theme_bw() +
              theme(
                legend.position = "top",
                plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
                plot.subtitle = element_text(hjust = 0.5, size = 10)
              )
            
            plots_dir <- paste0(getOutputDirectory(projP_3), "/Plots/")
            if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE)
            
            tryCatch({
              ggsave(
                filename = paste0(plots_dir, "Sample1_vs_Sample2_", cluster, "_Volcano_2025-10-09.pdf"),
                plot = pv,
                width = 6,
                height = 5,
                device = "pdf"
              )
              print(paste("  Volcano plot saved for", cluster))
            }, error = function(e) {
              print(paste("  Error saving volcano plot for", cluster, ":", e$message))
            }, finally = {
              while(dev.cur() > 1) dev.off()
            })
            
          } else {
            print(paste("  Skipping volcano plot for", cluster, "- insufficient genes"))
          }
        }
      }
    }
  }
}

# Cleanup after Sample1 vs Sample2
while(dev.cur() > 1) dev.off()


#####################################################
# Sample1 vs Sample3 - by cluster with volcano plots
#####################################################

common_clusters_s1s3 <- get_common_clusters("sample1", "sample3")
print(paste("Common clusters between sample1 and sample3:", paste(common_clusters_s1s3, collapse=", ")))

if(length(common_clusters_s1s3) > 0) {
  
  for(cluster in common_clusters_s1s3) {
    
    print(paste("Processing cluster:", cluster))
    
    clusterSubset <- projP_3[projP_3$Clusters %in% cluster]
    
    markerTest_cluster <- getMarkerFeatures(
      ArchRProj = clusterSubset,
      useMatrix = "GeneScoreMatrix",
      groupBy = "sample",
      testMethod = "wilcoxon",
      bias = c("TSSEnrichment", "log10(nFrags)"),
      useGroups = "sample1",
      bgdGroups = "sample3"
    )
    
    markerList_cluster <- getMarkers(markerTest_cluster, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")
    
    if("sample1" %in% names(markerList_cluster)) {
      cluster_markers <- markerList_cluster[["sample1"]]
      
      if(nrow(cluster_markers) > 0) {
        write.csv(cluster_markers, 
                  file = paste0("sample1_vs_sample3_", cluster, "_markers.csv"), 
                  row.names = TRUE)
        
        print(paste("  Markers found:", nrow(cluster_markers)))
        
        all_results <- getMarkers(markerTest_cluster, cutOff = "FDR <= 1")
        
        if("sample1" %in% names(all_results)) {
          volcano_data <- all_results[["sample1"]]
          
          if(nrow(volcano_data) > 10) {
            
            volcano_data$Significant <- ifelse(
              volcano_data$FDR <= 0.1 & abs(volcano_data$Log2FC) >= 0.5,
              "Significant",
              "Not Significant"
            )
            
            pv <- ggplot(volcano_data, aes(x = Log2FC, y = -log10(FDR), color = Significant)) +
              geom_point(alpha = 0.6, size = 1.5) +
              scale_color_manual(values = c("Not Significant" = "grey50", "Significant" = "red")) +
              geom_hline(yintercept = -log10(0.1), linetype = "dashed", color = "blue", linewidth = 0.5) +
              geom_vline(xintercept = c(-0.5, 0.5), linetype = "dashed", color = "blue", linewidth = 0.5) +
              labs(
                title = paste0("Sample1 vs Sample3 - ", cluster),
                x = "Log2 Fold Change",
                y = "-Log10(FDR)",
                subtitle = paste0(nrow(cluster_markers), " significant markers")
              ) +
              theme_bw() +
              theme(
                legend.position = "top",
                plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
                plot.subtitle = element_text(hjust = 0.5, size = 10)
              )
            
            plots_dir <- paste0(getOutputDirectory(projP_3), "/Plots/")
            if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE)
            
            tryCatch({
              ggsave(
                filename = paste0(plots_dir, "Sample1_vs_Sample3_", cluster, "_Volcano_2025-10-09.pdf"),
                plot = pv,
                width = 6,
                height = 5,
                device = "pdf"
              )
              print(paste("  Volcano plot saved for", cluster))
            }, error = function(e) {
              print(paste("  Error saving volcano plot for", cluster, ":", e$message))
            }, finally = {
              while(dev.cur() > 1) dev.off()
            })
            
          } else {
            print(paste("  Skipping volcano plot for", cluster, "- insufficient genes"))
          }
        }
      }
    }
  }
}

while(dev.cur() > 1) dev.off()


#####################################################
# Sample1 vs Sample4 - by cluster with volcano plots
#####################################################

common_clusters_s1s4 <- get_common_clusters("sample1", "sample4")
print(paste("Common clusters between sample1 and sample4:", paste(common_clusters_s1s4, collapse=", ")))

if(length(common_clusters_s1s4) > 0) {
  
  for(cluster in common_clusters_s1s4) {
    
    print(paste("Processing cluster:", cluster))
    
    clusterSubset <- projP_3[projP_3$Clusters %in% cluster]
    
    markerTest_cluster <- getMarkerFeatures(
      ArchRProj = clusterSubset,
      useMatrix = "GeneScoreMatrix",
      groupBy = "sample",
      testMethod = "wilcoxon",
      bias = c("TSSEnrichment", "log10(nFrags)"),
      useGroups = "sample1",
      bgdGroups = "sample4"
    )
    
    markerList_cluster <- getMarkers(markerTest_cluster, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")
    
    if("sample1" %in% names(markerList_cluster)) {
      cluster_markers <- markerList_cluster[["sample1"]]
      
      if(nrow(cluster_markers) > 0) {
        write.csv(cluster_markers, 
                  file = paste0("sample1_vs_sample4_", cluster, "_markers.csv"), 
                  row.names = TRUE)
        
        print(paste("  Markers found:", nrow(cluster_markers)))
        
        all_results <- getMarkers(markerTest_cluster, cutOff = "FDR <= 1")
        
        if("sample1" %in% names(all_results)) {
          volcano_data <- all_results[["sample1"]]
          
          if(nrow(volcano_data) > 10) {
            
            volcano_data$Significant <- ifelse(
              volcano_data$FDR <= 0.1 & abs(volcano_data$Log2FC) >= 0.5,
              "Significant",
              "Not Significant"
            )
            
            pv <- ggplot(volcano_data, aes(x = Log2FC, y = -log10(FDR), color = Significant)) +
              geom_point(alpha = 0.6, size = 1.5) +
              scale_color_manual(values = c("Not Significant" = "grey50", "Significant" = "red")) +
              geom_hline(yintercept = -log10(0.1), linetype = "dashed", color = "blue", linewidth = 0.5) +
              geom_vline(xintercept = c(-0.5, 0.5), linetype = "dashed", color = "blue", linewidth = 0.5) +
              labs(
                title = paste0("Sample1 vs Sample4 - ", cluster),
                x = "Log2 Fold Change",
                y = "-Log10(FDR)",
                subtitle = paste0(nrow(cluster_markers), " significant markers")
              ) +
              theme_bw() +
              theme(
                legend.position = "top",
                plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
                plot.subtitle = element_text(hjust = 0.5, size = 10)
              )
            
            plots_dir <- paste0(getOutputDirectory(projP_3), "/Plots/")
            if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE)
            
            tryCatch({
              ggsave(
                filename = paste0(plots_dir, "Sample1_vs_Sample4_", cluster, "_Volcano_2025-10-09.pdf"),
                plot = pv,
                width = 6,
                height = 5,
                device = "pdf"
              )
              print(paste("  Volcano plot saved for", cluster))
            }, error = function(e) {
              print(paste("  Error saving volcano plot for", cluster, ":", e$message))
            }, finally = {
              while(dev.cur() > 1) dev.off()
            })
            
          } else {
            print(paste("  Skipping volcano plot for", cluster, "- insufficient genes"))
          }
        }
      }
    }
  }
}

while(dev.cur() > 1) dev.off()


#####################################################
# Sample2 vs Sample3 - by cluster with volcano plots
#####################################################

common_clusters_s2s3 <- get_common_clusters("sample2", "sample3")
print(paste("Common clusters between sample2 and sample3:", paste(common_clusters_s2s3, collapse=", ")))

if(length(common_clusters_s2s3) > 0) {
  
  for(cluster in common_clusters_s2s3) {
    
    print(paste("Processing cluster:", cluster))
    
    clusterSubset <- projP_3[projP_3$Clusters %in% cluster]
    
    markerTest_cluster <- getMarkerFeatures(
      ArchRProj = clusterSubset,
      useMatrix = "GeneScoreMatrix",
      groupBy = "sample",
      testMethod = "wilcoxon",
      bias = c("TSSEnrichment", "log10(nFrags)"),
      useGroups = "sample2",
      bgdGroups = "sample3"
    )
    
    markerList_cluster <- getMarkers(markerTest_cluster, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")
    
    if("sample2" %in% names(markerList_cluster)) {
      cluster_markers <- markerList_cluster[["sample2"]]
      
      if(nrow(cluster_markers) > 0) {
        write.csv(cluster_markers, 
                  file = paste0("sample2_vs_sample3_", cluster, "_markers.csv"), 
                  row.names = TRUE)
        
        print(paste("  Markers found:", nrow(cluster_markers)))
        
        all_results <- getMarkers(markerTest_cluster, cutOff = "FDR <= 1")
        
        if("sample2" %in% names(all_results)) {
          volcano_data <- all_results[["sample2"]]
          
          if(nrow(volcano_data) > 10) {
            
            volcano_data$Significant <- ifelse(
              volcano_data$FDR <= 0.1 & abs(volcano_data$Log2FC) >= 0.5,
              "Significant",
              "Not Significant"
            )
            
            pv <- ggplot(volcano_data, aes(x = Log2FC, y = -log10(FDR), color = Significant)) +
              geom_point(alpha = 0.6, size = 1.5) +
              scale_color_manual(values = c("Not Significant" = "grey50", "Significant" = "red")) +
              geom_hline(yintercept = -log10(0.1), linetype = "dashed", color = "blue", linewidth = 0.5) +
              geom_vline(xintercept = c(-0.5, 0.5), linetype = "dashed", color = "blue", linewidth = 0.5) +
              labs(
                title = paste0("Sample2 vs Sample3 - ", cluster),
                x = "Log2 Fold Change",
                y = "-Log10(FDR)",
                subtitle = paste0(nrow(cluster_markers), " significant markers")
              ) +
              theme_bw() +
              theme(
                legend.position = "top",
                plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
                plot.subtitle = element_text(hjust = 0.5, size = 10)
              )
            
            plots_dir <- paste0(getOutputDirectory(projP_3), "/Plots/")
            if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE)
            
            tryCatch({
              ggsave(
                filename = paste0(plots_dir, "Sample2_vs_Sample3_", cluster, "_Volcano_2025-10-09.pdf"),
                plot = pv,
                width = 6,
                height = 5,
                device = "pdf"
              )
              print(paste("  Volcano plot saved for", cluster))
            }, error = function(e) {
              print(paste("  Error saving volcano plot for", cluster, ":", e$message))
            }, finally = {
              while(dev.cur() > 1) dev.off()
            })
            
          } else {
            print(paste("  Skipping volcano plot for", cluster, "- insufficient genes"))
          }
        }
      }
    }
  }
}

while(dev.cur() > 1) dev.off()


#####################################################
# Sample2 vs Sample4 - by cluster with volcano plots
#####################################################

common_clusters_s2s4 <- get_common_clusters("sample2", "sample4")
print(paste("Common clusters between sample2 and sample4:", paste(common_clusters_s2s4, collapse=", ")))

if(length(common_clusters_s2s4) > 0) {
  
  for(cluster in common_clusters_s2s4) {
    
    print(paste("Processing cluster:", cluster))
    
    clusterSubset <- projP_3[projP_3$Clusters %in% cluster]
    
    markerTest_cluster <- getMarkerFeatures(
      ArchRProj = clusterSubset,
      useMatrix = "GeneScoreMatrix",
      groupBy = "sample",
      testMethod = "wilcoxon",
      bias = c("TSSEnrichment", "log10(nFrags)"),
      useGroups = "sample2",
      bgdGroups = "sample4"
    )
    
    markerList_cluster <- getMarkers(markerTest_cluster, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")
    
    if("sample2" %in% names(markerList_cluster)) {
      cluster_markers <- markerList_cluster[["sample2"]]
      
      if(nrow(cluster_markers) > 0) {
        write.csv(cluster_markers, 
                  file = paste0("sample2_vs_sample4_", cluster, "_markers.csv"), 
                  row.names = TRUE)
        
        print(paste("  Markers found:", nrow(cluster_markers)))
        
        all_results <- getMarkers(markerTest_cluster, cutOff = "FDR <= 1")
        
        if("sample2" %in% names(all_results)) {
          volcano_data <- all_results[["sample2"]]
          
          if(nrow(volcano_data) > 10) {
            
            volcano_data$Significant <- ifelse(
              volcano_data$FDR <= 0.1 & abs(volcano_data$Log2FC) >= 0.5,
              "Significant",
              "Not Significant"
            )
            
            pv <- ggplot(volcano_data, aes(x = Log2FC, y = -log10(FDR), color = Significant)) +
              geom_point(alpha = 0.6, size = 1.5) +
              scale_color_manual(values = c("Not Significant" = "grey50", "Significant" = "red")) +
              geom_hline(yintercept = -log10(0.1), linetype = "dashed", color = "blue", linewidth = 0.5) +
              geom_vline(xintercept = c(-0.5, 0.5), linetype = "dashed", color = "blue", linewidth = 0.5) +
              labs(
                title = paste0("Sample2 vs Sample4 - ", cluster),
                x = "Log2 Fold Change",
                y = "-Log10(FDR)",
                subtitle = paste0(nrow(cluster_markers), " significant markers")
              ) +
              theme_bw() +
              theme(
                legend.position = "top",
                plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
                plot.subtitle = element_text(hjust = 0.5, size = 10)
              )
            
            plots_dir <- paste0(getOutputDirectory(projP_3), "/Plots/")
            if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE)
            
            tryCatch({
              ggsave(
                filename = paste0(plots_dir, "Sample2_vs_Sample4_", cluster, "_Volcano_2025-10-09.pdf"),
                plot = pv,
                width = 6,
                height = 5,
                device = "pdf"
              )
              print(paste("  Volcano plot saved for", cluster))
            }, error = function(e) {
              print(paste("  Error saving volcano plot for", cluster, ":", e$message))
            }, finally = {
              while(dev.cur() > 1) dev.off()
            })
            
          } else {
            print(paste("  Skipping volcano plot for", cluster, "- insufficient genes"))
          }
        }
      }
    }
  }
}

while(dev.cur() > 1) dev.off()


#####################################################
# Sample3 vs Sample4 - by cluster with volcano plots
#####################################################

common_clusters_s3s4 <- get_common_clusters("sample3", "sample4")
print(paste("Common clusters between sample3 and sample4:", paste(common_clusters_s3s4, collapse=", ")))

if(length(common_clusters_s3s4) > 0) {
  
  for(cluster in common_clusters_s3s4) {
    
    print(paste("Processing cluster:", cluster))
    
    clusterSubset <- projP_3[projP_3$Clusters %in% cluster]
    
    markerTest_cluster <- getMarkerFeatures(
      ArchRProj = clusterSubset,
      useMatrix = "GeneScoreMatrix",
      groupBy = "sample",
      testMethod = "wilcoxon",
      bias = c("TSSEnrichment", "log10(nFrags)"),
      useGroups = "sample3",
      bgdGroups = "sample4"
    )
    
    markerList_cluster <- getMarkers(markerTest_cluster, cutOff = "FDR <= 0.01 & abs(Log2FC) >= 1.25")
    
    if("sample3" %in% names(markerList_cluster)) {
      cluster_markers <- markerList_cluster[["sample3"]]
      
      if(nrow(cluster_markers) > 0) {
        write.csv(cluster_markers, 
                  file = paste0("sample3_vs_sample4_", cluster, "_markers.csv"), 
                  row.names = TRUE)
        
        print(paste("  Markers found:", nrow(cluster_markers)))
        
        all_results <- getMarkers(markerTest_cluster, cutOff = "FDR <= 1")
        
        if("sample3" %in% names(all_results)) {
          volcano_data <- all_results[["sample3"]]
          
          if(nrow(volcano_data) > 10) {
            
            volcano_data$Significant <- ifelse(
              volcano_data$FDR <= 0.1 & abs(volcano_data$Log2FC) >= 0.5,
              "Significant",
              "Not Significant"
            )
            
            pv <- ggplot(volcano_data, aes(x = Log2FC, y = -log10(FDR), color = Significant)) +
              geom_point(alpha = 0.6, size = 1.5) +
              scale_color_manual(values = c("Not Significant" = "grey50", "Significant" = "red")) +
              geom_hline(yintercept = -log10(0.1), linetype = "dashed", color = "blue", linewidth = 0.5) +
              geom_vline(xintercept = c(-0.5, 0.5), linetype = "dashed", color = "blue", linewidth = 0.5) +
              labs(
                title = paste0("Sample3 vs Sample4 - ", cluster),
                x = "Log2 Fold Change",
                y = "-Log10(FDR)",
                subtitle = paste0(nrow(cluster_markers), " significant markers")
              ) +
              theme_bw() +
              theme(
                legend.position = "top",
                plot.title = element_text(hjust = 0.5, face = "bold", size = 12),
                plot.subtitle = element_text(hjust = 0.5, size = 10)
              )
            
            plots_dir <- paste0(getOutputDirectory(projP_3), "/Plots/")
            if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE)
            
            tryCatch({
              ggsave(
                filename = paste0(plots_dir, "Sample3_vs_Sample4_", cluster, "_Volcano_2025-10-09.pdf"),
                plot = pv,
                width = 6,
                height = 5,
                device = "pdf"
              )
              print(paste("  Volcano plot saved for", cluster))
            }, error = function(e) {
              print(paste("  Error saving volcano plot for", cluster, ":", e$message))
            }, finally = {
              while(dev.cur() > 1) dev.off()
            })
            
          } else {
            print(paste("  Skipping volcano plot for", cluster, "- insufficient genes"))
          }
        }
      }
    }
  }
}

# Final cleanup
while(dev.cur() > 1) dev.off()

print("Done! All cluster-specific volcano plots have been created.")
print(paste("CSV files saved to:", getwd()))
print(paste("Volcano plots saved to:", paste0(getOutputDirectory(projP_3), "/Plots/")))
