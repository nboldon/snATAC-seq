#!/bin/bash

# Step 1: Cell Ranger ATAC Environment Setup
# Creates conda environment for ATAC-seq analysis pipeline
# Supports both macOS (for data prep) and Linux (for Cell Ranger ATAC)

set -euo pipefail

# Configuration
ENV_NAME="cellranger_atac"
CELLRANGER_VERSION="2.1.0"
TOOLS_DIR="$HOME/tools"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_platform() {
    local os_name=$(uname -s)
    local arch=$(uname -m)
    
    case "$os_name" in
        "Darwin")
            if [[ "$arch" == "arm64" ]]; then
                echo "macos_arm64"
            else
                echo "macos_intel"
            fi
            ;;
        "Linux")
            echo "linux"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

create_conda_env() {
    local platform=$1
    local yaml_file="${ENV_NAME}_${platform}.yml"
    
    print_status "Creating conda environment YAML for $platform..."
    
    case "$platform" in
        "macos_arm64")
            cat > "$yaml_file" << 'EOF'
name: cellranger_atac
channels:
  - conda-forge
  - bioconda
dependencies:
  - python=3.9
  
  # Core system tools
  - wget
  - curl
  - git
  - tree
  
  # Quality control tools
  - fastqc=0.12.1
  - multiqc=1.14
  
  # Analysis dependencies
  - samtools=1.17
  - bedtools=2.31.0
  
  # Python data science stack
  - pandas=2.0.3
  - numpy=1.24.4
  - scipy=1.11.2
  - matplotlib=3.7.2
  - seaborn=0.12.2
  - jupyter=1.0.0
  - ipython=8.14.0
  - plotly=5.15.0
  
  # R and packages for ArchR
  - r-base=4.3.1
  - r-devtools=2.4.5
  - r-ggplot2=3.4.3
  - r-dplyr=1.1.2
  - r-tidyr=1.3.0
  - r-readr=2.1.4
  - r-stringr=1.5.0
  - r-rcpp=1.0.11
  - r-matrix=1.6_1
  - r-data.table=1.14.8
  - r-cowplot=1.1.1
  - r-viridis=0.6.4
  
  # Apple Silicon build tools
  - clang_osx-arm64
  - clangxx_osx-arm64
  - gfortran_osx-arm64
  
  # Utilities
  - parallel=20230722
  - pigz=2.8
  - hdf5=1.14.2
  
  # SRA tools for data download
  - sra-tools
  
  - pip=23.2.1
  - pip:
    - scanpy==1.9.5
    - anndata==0.9.2
    - umap-learn==0.5.3
    - scikit-learn==1.3.0
    - pybedtools==0.9.1
    - pysam==0.21.0
EOF
            ;;
        "macos_intel")
            cat > "$yaml_file" << 'EOF'
name: cellranger_atac
channels:
  - conda-forge
  - bioconda
dependencies:
  - python=3.9
  - wget
  - curl
  - git
  - tree
  - fastqc=0.12.1
  - multiqc=1.14
  - samtools=1.17
  - bedtools=2.31.0
  - pandas=2.0.3
  - numpy=1.24.4
  - scipy=1.11.2
  - matplotlib=3.7.2
  - seaborn=0.12.2
  - jupyter=1.0.0
  - r-base=4.3.1
  - r-devtools=2.4.5
  - r-ggplot2=3.4.3
  - r-dplyr=1.1.2
  - clang_osx-64
  - clangxx_osx-64
  - gfortran_osx-64
  - parallel=20230722
  - sra-tools
  - pip=23.2.1
  - pip:
    - scanpy==1.9.5
    - anndata==0.9.2
    - umap-learn==0.5.3
    - scikit-learn==1.3.0
    - pybedtools==0.9.1
    - pysam==0.21.0
EOF
            ;;
        "linux")
            cat > "$yaml_file" << 'EOF'
name: cellranger_atac
channels:
  - conda-forge
  - bioconda
dependencies:
  - python=3.9
  - wget
  - curl
  - git
  - tree
  - fastqc=0.12.1
  - multiqc=1.14
  - samtools=1.17
  - bedtools=2.31.0
  - pandas=2.0.3
  - numpy=1.24.4
  - scipy=1.11.2
  - matplotlib=3.7.2
  - seaborn=0.12.2
  - jupyter=1.0.0
  - r-base=4.3.1
  - r-devtools=2.4.5
  - r-ggplot2=3.4.3
  - r-dplyr=1.1.2
  - gcc_linux-64
  - gxx_linux-64
  - gfortran_linux-64
  - parallel=20230722
  - sra-tools
  - pip=23.2.1
  - pip:
    - scanpy==1.9.5
    - anndata==0.9.2
    - umap-learn==0.5.3
    - scikit-learn==1.3.0
    - pybedtools==0.9.1
    - pysam==0.21.0
EOF
            ;;
    esac
    
    print_success "Created $yaml_file"
    return 0
}

setup_conda_environment() {
    local yaml_file=$1
    
    # Check if environment already exists
    if conda env list | grep -q "^${ENV_NAME} "; then
        print_warning "Environment '${ENV_NAME}' already exists"
        read -p "Do you want to remove and recreate it? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_status "Removing existing environment..."
            conda env remove -n "$ENV_NAME" -y
        else
            print_status "Skipping environment creation"
            return 0
        fi
    fi
    
    print_status "Creating conda environment from $yaml_file..."
    if conda env create -f "$yaml_file"; then
        print_success "Conda environment '$ENV_NAME' created successfully"
    else
        print_error "Failed to create conda environment"
        return 1
    fi
}

install_cellranger_atac() {
    local platform=$1
    
    if [[ "$platform" != "linux" ]]; then
        print_warning "Cell Ranger ATAC only runs on Linux. Skipping installation on $platform"
        print_status "You can still use this environment for data preprocessing"
        return 0
    fi
    
    print_status "Installing Cell Ranger ATAC..."
    
    # Create tools directory
    mkdir -p "$TOOLS_DIR"
    cd "$TOOLS_DIR"
    
    # Check if Cell Ranger ATAC is already installed
    if [[ -d "cellranger-atac-${CELLRANGER_VERSION}" ]]; then
        print_warning "Cell Ranger ATAC ${CELLRANGER_VERSION} already exists"
        export PATH="$TOOLS_DIR/cellranger-atac-${CELLRANGER_VERSION}:$PATH"
        if cellranger-atac --help > /dev/null 2>&1; then
            print_success "Cell Ranger ATAC is working"
            return 0
        fi
    fi
    
    # Download Cell Ranger ATAC
    local download_url="https://cf.10xgenomics.com/releases/cell-atac/cellranger-atac-${CELLRANGER_VERSION}.tar.gz"
    local tar_file="cellranger-atac-${CELLRANGER_VERSION}.tar.gz"
    
    print_status "Downloading Cell Ranger ATAC ${CELLRANGER_VERSION}..."
    if ! wget -O "$tar_file" "$download_url"; then
        print_error "Failed to download Cell Ranger ATAC"
        print_status "You may need to download it manually from 10x Genomics website"
        return 1
    fi
    
    # Extract
    print_status "Extracting Cell Ranger ATAC..."
    tar -xzf "$tar_file"
    
    # Add to PATH
    export PATH="$TOOLS_DIR/cellranger-atac-${CELLRANGER_VERSION}:$PATH"
    
    # Test installation
    if cellranger-atac --help > /dev/null 2>&1; then
        print_success "Cell Ranger ATAC installed successfully"
        
        # Add PATH export to bash profile
        local bash_profile="$HOME/.bashrc"
        [[ -f "$HOME/.bash_profile" ]] && bash_profile="$HOME/.bash_profile"
        
        if ! grep -q "cellranger-atac-${CELLRANGER_VERSION}" "$bash_profile" 2>/dev/null; then
            echo "export PATH=\"$TOOLS_DIR/cellranger-atac-${CELLRANGER_VERSION}:\$PATH\"" >> "$bash_profile"
            print_status "Added Cell Ranger ATAC to PATH in $bash_profile"
        fi
    else
        print_error "Cell Ranger ATAC installation failed"
        return 1
    fi
    
    # Cleanup
    rm -f "$tar_file"
}

download_reference_genome() {
    local platform=$1
    
    if [[ "$platform" != "linux" ]]; then
        print_warning "Reference genome download skipped on $platform"
        return 0
    fi
    
    print_status "Downloading mm10 reference genome..."
    
    cd "$TOOLS_DIR"
    local ref_url="https://cf.10xgenomics.com/supp/cell-atac/refdata-cellranger-atac-mm10-2020-A-2.0.0.tar.gz"
    local ref_file="refdata-cellranger-atac-mm10-2020-A-2.0.0.tar.gz"
    
    if [[ -d "refdata-cellranger-atac-mm10-2020-A-2.0.0" ]]; then
        print_success "mm10 reference already exists"
        return 0
    fi
    
    if wget "$ref_url" && tar -xzf "$ref_file"; then
        print_success "mm10 reference genome downloaded"
        rm -f "$ref_file"
    else
        print_error "Failed to download reference genome"
        return 1
    fi
}

install_archr() {
    print_status "Installing ArchR and dependencies..."
    
    # Activate conda environment for R installation
    eval "$(conda shell.bash hook)"
    conda activate "$ENV_NAME"
    
    # Create R script for installation
    cat > install_archr.R << 'EOF'
# Install ArchR and dependencies
options(repos = c(CRAN = "https://cloud.r-project.org"))

# Install BiocManager if not present
if (!requireNamespace("BiocManager", quietly = TRUE)) {
    install.packages("BiocManager")
}

# Install Bioconductor packages
BiocManager::install(c(
    "GenomicRanges",
    "SummarizedExperiment", 
    "SingleCellExperiment",
    "GenomicAlignments",
    "rtracklayer"
), update = FALSE, ask = FALSE)

# Install ArchR
if (!requireNamespace("devtools", quietly = TRUE)) {
    install.packages("devtools")
}

devtools::install_github("GreenleafLab/ArchR", ref="master", repos = BiocManager::repositories(), upgrade = "never")

# Test installation
library(ArchR)
addArchRGenome("mm10")

cat("ArchR installation completed successfully!\n")
EOF
    
    if Rscript install_archr.R; then
        print_success "ArchR installed successfully"
        rm -f install_archr.R
    else
        print_error "ArchR installation failed"
        return 1
    fi
}

test_environment() {
    print_status "Testing environment setup..."
    
    eval "$(conda shell.bash hook)"
    conda activate "$ENV_NAME"
    
    # Test Python
    python -c "import pandas, numpy, scanpy; print('✅ Python packages working')" || print_error "Python packages failed"
    
    # Test R
    Rscript -e "library(ArchR); cat('✅ ArchR working\n')" || print_warning "ArchR test failed"
    
    # Test tools
    which samtools > /dev/null && print_success "samtools: $(which samtools)" || print_warning "samtools not found"
    which fastqc > /dev/null && print_success "fastqc: $(which fastqc)" || print_warning "fastqc not found"
    
    # Test Cell Ranger ATAC (Linux only)
    if which cellranger-atac > /dev/null 2>&1; then
        print_success "cellranger-atac: $(which cellranger-atac)"
    else
        print_warning "cellranger-atac not found (normal on macOS)"
    fi
}

main() {
    echo "======================================================"
    echo "Cell Ranger ATAC Environment Setup"
    echo "======================================================"
    echo "Host: $(hostname)"
    echo "OS: $(uname -s) $(uname -m)"
    echo ""
    
    # Detect platform
    local platform=$(detect_platform)
    print_status "Detected platform: $platform"
    
    if [[ "$platform" == "unknown" ]]; then
        print_error "Unsupported platform"
        exit 1
    fi
    
    # Check conda availability
    if ! command -v conda > /dev/null; then
        print_error "Conda not found. Please install Miniconda or Anaconda first."
        exit 1
    fi
    
    # Create conda environment
    create_conda_env "$platform"
    setup_conda_environment "${ENV_NAME}_${platform}.yml"
    
    # Install Cell Ranger ATAC (Linux only)
    install_cellranger_atac "$platform"
    
    # Download reference genome (Linux only)
    download_reference_genome "$platform"
    
    # Install ArchR
    install_archr
    
    # Test everything
    test_environment
    
    echo ""
    print_success "Setup completed!"
    echo ""
    echo "Next steps:"
    echo "1. Activate environment: conda activate $ENV_NAME"
    echo "2. Run setup dependencies script (Step 2)"
    echo "3. Build custom reference if needed (Step 3)"
    
    # Cleanup YAML files
    rm -f "${ENV_NAME}_${platform}.yml" install_archr.R
}

main "$@"
