#####################################################
#####################################################
## PHASE 6: BROWSER TRACK GENERATION FOR GENE UNIONS
#####################################################
#####################################################

library(ArchR)
library(ggplot2)
library(dplyr)

# Load project if needed
projP_3 <- loadArchRProject(path = "/Volumes/DataBox2/Save-ProjP_3", 
                            force = FALSE, showLogo = FALSE)


#####################################################
## STEP 1: IDENTIFY PRIORITY GENE UNIONS
#####################################################


# Read the master gene union file
master_unions <- read.csv("MASTER_ALL_GENE_UNIONS_ALL_CLUSTERS.csv", 
                          stringsAsFactors = FALSE)

# Filter for robust unions only (recommended)
priority_unions <- master_unions %>%
  filter(robust_union == TRUE) %>%
  arrange(mean_FDR, desc(mean_absLog2FC))

cat(paste("Total gene unions:", nrow(master_unions), "\n"))
cat(paste("Robust gene unions:", nrow(priority_unions), "\n\n"))

# Alternatively, get top N genes by FDR across all clusters
top_n_genes <- 50  # Adjust as needed
priority_genes <- priority_unions %>%
  group_by(Gene) %>%
  summarise(
    min_FDR = min(mean_FDR, na.rm = TRUE),
    max_absLog2FC = max(mean_absLog2FC, na.rm = TRUE),
    n_clusters = n(),
    clusters = paste(unique(cluster), collapse = ";"),
    .groups = 'drop'
  ) %>%
  arrange(min_FDR, desc(max_absLog2FC)) %>%
  head(top_n_genes)

cat("Top priority genes for browser tracks:\n")
print(head(priority_genes, 20))

write.csv(priority_genes, 
          "Priority_Genes_for_Browser_Tracks_2025-10-09.csv", 
          row.names = FALSE)

#####################################################
## STEP 2: ADD CO-ACCESSIBILITY (if not already done)
#####################################################

# Check if co-accessibility already exists
if(!"Peak2GeneLinks" %in% names(projP_3@projectMetadata)) {
  
  cat("\nAdding co-accessibility links...\n")
  
  # Add peak-to-gene links
  projP_3 <- addPeak2GeneLinks(
    ArchRProj = projP_3,
    reducedDims = "IterativeLSI",
    useMatrix = "GeneIntegrationMatrix"  # or "GeneScoreMatrix" if no integration
  )
  
  cat("Co-accessibility links added successfully!\n\n")
  
} else {
  cat("\nCo-accessibility links already present.\n\n")
}

#####################################################
## STEP 3: CREATE BROWSER TRACKS BY SAMPLE
#####################################################

cat("========================================\n")
cat("GENERATING BROWSER TRACKS\n")
cat("========================================\n\n")

# Function to create browser tracks for a gene
create_gene_browser_track <- function(gene_symbol, 
                                      upstream = 50000, 
                                      downstream = 50000,
                                      highlight_peaks = TRUE) {
  
  cat(paste("Creating browser track for", gene_symbol, "...\n"))
  
  # Create browser track grouped by sample
  tryCatch({
    
    p <- plotBrowserTrack(
      ArchRProj = projP_3,
      groupBy = "sample",  # Use your renamed samples (sample1-4)
      geneSymbol = gene_symbol,
      upstream = upstream,
      downstream = downstream,
      loops = getPeak2GeneLinks(projP_3),  # Add co-accessibility loops
      features = getPeakSet(projP_3),  # Highlight peaks
      plotSummary = c("bulkTrack", "geneTrack", "loopTrack", "featureTrack"),
      sizes = c(10, 1.5, 3, 1.5),  # Relative heights
      pal = c("#D62828", "#F77F00", "#FCBF49", "#06A77D")  # Colors for samples
    )
    
    # Save the plot
    pdf_filename <- paste0("BrowserTrack_", gene_symbol, "_by_Sample_2025-10-09.pdf")
    
    pdf(pdf_filename, width = 12, height = 8)
    grid::grid.newpage()
    grid::grid.draw(p[[gene_symbol]])
    dev.off()
    
    cat(paste("  ✓ Saved:", pdf_filename, "\n"))
    
    return(TRUE)
    
  }, error = function(e) {
    cat(paste("  ✗ Error for", gene_symbol, ":", e$message, "\n"))
    return(FALSE)
  })
}

#####################################################
## STEP 4: GENERATE TRACKS FOR PRIORITY GENES
#####################################################

# Create directory for browser tracks
browser_dir <- "BrowserTracks_GeneUnions"
if(!dir.exists(browser_dir)) dir.create(browser_dir, recursive = TRUE)
setwd(browser_dir)

# Generate tracks for top priority genes
genes_to_plot <- priority_genes$Gene[1:min(20, nrow(priority_genes))]  # Top 20

cat("\nGenerating browser tracks for top priority genes...\n")
cat(paste("Total genes:", length(genes_to_plot), "\n\n"))

success_count <- 0
for(gene in genes_to_plot) {
  success <- create_gene_browser_track(
    gene_symbol = gene,
    upstream = 50000,
    downstream = 50000
  )
  if(success) success_count <- success_count + 1
}

cat(paste("\n✓ Successfully created", success_count, "of", length(genes_to_plot), 
          "browser tracks\n\n"))

# Return to original directory
setwd("..")

#####################################################
## STEP 5: CREATE CLUSTER-SPECIFIC BROWSER TRACKS
#####################################################

cat("========================================\n")
cat("CLUSTER-SPECIFIC BROWSER TRACKS\n")
cat("========================================\n\n")

# Function to create browser tracks grouped by cluster
create_cluster_browser_track <- function(gene_symbol, 
                                         clusters_to_show = NULL,
                                         upstream = 50000, 
                                         downstream = 50000) {
  
  cat(paste("Creating cluster-specific track for", gene_symbol, "...\n"))
  
  tryCatch({
    
    # If specific clusters provided, subset project
    if(!is.null(clusters_to_show)) {
      projSubset <- projP_3[projP_3$Clusters %in% clusters_to_show, ]
    } else {
      projSubset <- projP_3
    }
    
    p <- plotBrowserTrack(
      ArchRProj = projSubset,
      groupBy = "Clusters",
      geneSymbol = gene_symbol,
      upstream = upstream,
      downstream = downstream,
      loops = getPeak2GeneLinks(projSubset),
      features = getPeakSet(projSubset),
      plotSummary = c("bulkTrack", "geneTrack", "loopTrack", "featureTrack")
    )
    
    # Save the plot
    cluster_str <- if(!is.null(clusters_to_show)) {
      paste0("_", paste(clusters_to_show, collapse = "-"))
    } else {
      "_AllClusters"
    }
    
    pdf_filename <- paste0("BrowserTrack_", gene_symbol, cluster_str, 
                           "_by_Cluster_2025-10-09.pdf")
    
    pdf(pdf_filename, width = 12, height = 10)
    grid::grid.newpage()
    grid::grid.draw(p[[gene_symbol]])
    dev.off()
    
    cat(paste("  ✓ Saved:", pdf_filename, "\n"))
    
    return(TRUE)
    
  }, error = function(e) {
    cat(paste("  ✗ Error for", gene_symbol, ":", e$message, "\n"))
    return(FALSE)
  })
}

# Create cluster-specific tracks for top genes
browser_cluster_dir <- "BrowserTracks_GeneUnions_ByClusters"
if(!dir.exists(browser_cluster_dir)) dir.create(browser_cluster_dir, recursive = TRUE)
setwd(browser_cluster_dir)

# Get genes that appear in specific clusters of interest
# For example, genes in C18 (highest peak count from your analysis)
c18_genes <- priority_unions %>%
  filter(cluster == "C18") %>%
  arrange(mean_FDR) %>%
  head(10) %>%
  pull(Gene) %>%
  unique()

cat("\nGenerating cluster-specific tracks for C18 genes...\n")
for(gene in c18_genes) {
  create_cluster_browser_track(
    gene_symbol = gene,
    clusters_to_show = c("C18"),  # Can add more clusters
    upstream = 50000,
    downstream = 50000
  )
}

setwd("..")

#####################################################
## STEP 6: CREATE SAMPLE-COMPARISON BROWSER TRACKS
#####################################################

cat("\n========================================\n")
cat("SAMPLE-COMPARISON BROWSER TRACKS\n")
cat("========================================\n\n")

# Function to create side-by-side sample comparison tracks
create_comparison_browser_track <- function(gene_symbol,
                                            sample1 = "sample1",
                                            sample2 = "sample2",
                                            cluster = NULL,
                                            upstream = 50000,
                                            downstream = 50000) {
  
  cat(paste("Creating comparison track:", sample1, "vs", sample2, 
            "for", gene_symbol, "\n"))
  
  tryCatch({
    
    # Subset to specific samples
    if(!is.null(cluster)) {
      projSubset <- projP_3[projP_3$sample %in% c(sample1, sample2) & 
                              projP_3$Clusters == cluster, ]
      cluster_label <- paste0("_", cluster)
    } else {
      projSubset <- projP_3[projP_3$sample %in% c(sample1, sample2), ]
      cluster_label <- ""
    }
    
    p <- plotBrowserTrack(
      ArchRProj = projSubset,
      groupBy = "sample",
      geneSymbol = gene_symbol,
      upstream = upstream,
      downstream = downstream,
      loops = getPeak2GeneLinks(projSubset),
      features = getPeakSet(projSubset),
      plotSummary = c("bulkTrack", "geneTrack", "loopTrack", "featureTrack"),
      sizes = c(10, 1.5, 3, 1.5),
      pal = c("#D62828", "#F77F00")  # Colors for two samples
    )
    
    # Save
    pdf_filename <- paste0("BrowserTrack_", gene_symbol, "_", 
                           sample1, "_vs_", sample2, cluster_label,
                           "_2025-10-09.pdf")
    
    pdf(pdf_filename, width = 12, height = 6)
    grid::grid.newpage()
    grid::grid.draw(p[[gene_symbol]])
    dev.off()
    
    cat(paste("  ✓ Saved:", pdf_filename, "\n"))
    
    return(TRUE)
    
  }, error = function(e) {
    cat(paste("  ✗ Error:", e$message, "\n"))
    return(FALSE)
  })
}

# Create comparison-specific tracks
browser_comparison_dir <- "BrowserTracks_GeneUnions_Comparisons"
if(!dir.exists(browser_comparison_dir)) dir.create(browser_comparison_dir, recursive = TRUE)
setwd(browser_comparison_dir)

# Get genes from specific comparisons
# Example: sample1 vs sample2 in C18
comparison_genes <- priority_unions %>%
  filter(comparison_pair == "sample1_sample2" & cluster == "C18") %>%
  arrange(mean_FDR) %>%
  head(5) %>%
  pull(Gene) %>%
  unique()

cat("\nGenerating comparison-specific tracks...\n")
for(gene in comparison_genes) {
  create_comparison_browser_track(
    gene_symbol = gene,
    sample1 = "sample1",
    sample2 = "sample2",
    cluster = "C18",
    upstream = 50000,
    downstream = 50000
  )
}

setwd("..")

#####################################################
## STEP 7: BATCH GENERATE ALL PRIORITY GENE TRACKS
#####################################################

cat("\n========================================\n")
cat("BATCH GENERATION: ALL FORMATS\n")
cat("========================================\n\n")

# Function to generate all track types for one gene
generate_all_tracks_for_gene <- function(gene_symbol) {
  
  cat(paste("\n--- Processing", gene_symbol, "---\n"))
  
  # 1. By sample
  setwd("BrowserTracks_GeneUnions")
  create_gene_browser_track(gene_symbol, upstream = 50000, downstream = 50000)
  setwd("..")
  
  # 2. By clusters (all clusters where gene is a union)
  gene_clusters <- priority_unions %>%
    filter(Gene == gene_symbol) %>%
    pull(cluster) %>%
    unique()
  
  if(length(gene_clusters) > 0) {
    setwd("BrowserTracks_GeneUnions_ByClusters")
    for(clust in gene_clusters) {
      create_cluster_browser_track(gene_symbol, clusters_to_show = clust)
    }
    setwd("..")
  }
  
  cat(paste("✓ Completed all tracks for", gene_symbol, "\n"))
}

# Generate all tracks for top 10 genes
top_genes_full <- priority_genes$Gene[1:min(10, nrow(priority_genes))]

cat("\nGenerating comprehensive tracks for top 10 genes...\n")
for(gene in top_genes_full) {
  generate_all_tracks_for_gene(gene)
}

#####################################################
## STEP 8: CREATE SUMMARY DOCUMENT
#####################################################

cat("\n========================================\n")
cat("CREATING SUMMARY DOCUMENT\n")
cat("========================================\n\n")

# Create a summary of all generated tracks
track_summary <- data.frame(
  Gene = priority_genes$Gene[1:min(20, nrow(priority_genes))],
  min_FDR = priority_genes$min_FDR[1:min(20, nrow(priority_genes))],
  max_absLog2FC = priority_genes$max_absLog2FC[1:min(20, nrow(priority_genes))],
  n_clusters = priority_genes$n_clusters[1:min(20, nrow(priority_genes))],
  clusters = priority_genes$clusters[1:min(20, nrow(priority_genes))],
  track_by_sample = file.exists(paste0("BrowserTracks_GeneUnions/BrowserTrack_", 
                                       priority_genes$Gene[1:min(20, nrow(priority_genes))], 
                                       "_by_Sample_2025-10-09.pdf"))
)

write.csv(track_summary, "Browser_Track_Summary_2025-10-09.csv", row.names = FALSE)

cat("\n========================================\n")
cat("BROWSER TRACK GENERATION COMPLETE!\n")
cat("========================================\n\n")

cat("GENERATED DIRECTORIES:\n")
cat("======================\n")
cat("1. BrowserTracks_GeneUnions/\n")
cat("   - Tracks grouped by sample (sample1-4)\n")
cat("   - Shows differential accessibility across samples\n\n")

cat("2. BrowserTracks_GeneUnions_ByClusters/\n")
cat("   - Tracks grouped by cell type clusters\n")
cat("   - Shows cell-type-specific patterns\n\n")

cat("3. BrowserTracks_GeneUnions_Comparisons/\n")
cat("   - Direct sample-vs-sample comparisons\n")
cat("   - Focused on specific pairwise differences\n\n")

cat("TRACK FEATURES:\n")
cat("===============\n")
cat("• Bulk accessibility tracks (colored by group)\n")
cat("• Gene annotations with transcript models\n")
cat("• Co-accessibility loops (Peak2Gene links)\n")
cat("• Peak features highlighted\n")
cat("• ±50kb window around gene TSS\n\n")

cat("NEXT STEPS:\n")
cat("===========\n")
cat("1. Review Browser_Track_Summary_2025-10-09.csv\n")
cat("2. Manually inspect tracks for:\n")
cat("   - Differential peak patterns\n")
cat("   - Co-accessibility changes\n")
cat("   - Regulatory architecture\n")
cat("3. Identify candidate regulatory regions\n")
cat("4. Cross-reference with peak analysis results\n\n")

#####################################################
## STEP 9: SAVE PROJECT
#####################################################

saveArchRProject(ArchRProj = projP_3, 
                 outputDirectory = "/Volumes/DataBox2/Save-ProjP_3", 
                 load = FALSE)

cat("Project saved successfully!\n\n")
