library(clusterProfiler)
library(org.Mm.eg.db)
library(AnnotationDbi)
library(enrichplot)
library(ggplot2)
library(dplyr)
library(tidyr)

setwd("/Volumes/DataBox2/archR_analysis")

# Create output directory
enrichment_dir <- "Pathway_Enrichment_Results"
if(!dir.exists(enrichment_dir)) dir.create(enrichment_dir, recursive = TRUE)

#####################################################
#####################################################
# STEP 1: IDENTIFY MARKER GENES WITH TF BINDING
#####################################################
#####################################################


#####################################################
# Load TF-target network (genes with TF binding sites)
#####################################################

tf_targets <- read.csv("All_TF_Target_Networks_AllMotifs_2025-10-10.csv", 
                       stringsAsFactors = FALSE)

cat(paste("TF-target relationships loaded:", nrow(tf_targets), "\n"))
cat(paste("Unique target genes with TF binding:", n_distinct(tf_targets$Target_Gene), "\n\n"))

# Get list of genes that have TF binding
genes_with_tf_binding <- unique(tf_targets$Target_Gene)

#####################################################
# Load marker genes (DA genes from earlier analysis)
#####################################################

cat("Loading differentially accessible marker genes...\n\n")

all_marker_genes <- data.frame()

comparison_pairs <- list(
  list(s1 = "sample1", s2 = "sample2"),
  list(s1 = "sample1", s2 = "sample3"),
  list(s1 = "sample1", s2 = "sample4"),
  list(s1 = "sample2", s2 = "sample3"),
  list(s1 = "sample2", s2 = "sample4"),
  list(s1 = "sample3", s2 = "sample4")
)

# Load gene unions (bidirectional genes - highest confidence)
for(pair in comparison_pairs) {
  
  s1 <- pair$s1
  s2 <- pair$s2
  
  comp_name <- paste0(s1, " vs ", s2)
  
  union_files <- list.files(pattern = paste0(s1, "_", s2, "_.*_gene_unions.csv"))
  
  for(file in union_files) {
    cluster <- gsub(paste0(s1, "_", s2, "_"), "", file)
    cluster <- gsub("_gene_unions.csv", "", cluster)
    
    gene_data <- read.csv(file, stringsAsFactors = FALSE)
    
    if(nrow(gene_data) > 0 && "name" %in% colnames(gene_data)) {
      # Select only essential columns to avoid column mismatch
      gene_subset <- data.frame(
        name = gene_data$name,
        Comparison = comp_name,
        Cluster = cluster,
        Source = "Union",
        stringsAsFactors = FALSE
      )
      
      # Add Log2FC if available (useful for interpretation)
      if("Log2FC_sample1vssample2" %in% colnames(gene_data)) {
        gene_subset$Log2FC <- gene_data$Log2FC_sample1vssample2
      } else if("Log2FC_sample1vssample3" %in% colnames(gene_data)) {
        gene_subset$Log2FC <- gene_data$Log2FC_sample1vssample3
      } else if("Log2FC_sample1vssample4" %in% colnames(gene_data)) {
        gene_subset$Log2FC <- gene_data$Log2FC_sample1vssample4
      } else if("Log2FC_sample2vssample3" %in% colnames(gene_data)) {
        gene_subset$Log2FC <- gene_data$Log2FC_sample2vssample3
      } else if("Log2FC_sample2vssample4" %in% colnames(gene_data)) {
        gene_subset$Log2FC <- gene_data$Log2FC_sample2vssample4
      } else if("Log2FC_sample3vssample4" %in% colnames(gene_data)) {
        gene_subset$Log2FC <- gene_data$Log2FC_sample3vssample4
      }
      
      all_marker_genes <- rbind(all_marker_genes, gene_subset)
    }
  }
}

cat(paste("Total marker gene entries:", nrow(all_marker_genes), "\n"))
cat(paste("Unique marker genes:", n_distinct(all_marker_genes$name), "\n\n"))

#####################################################
# FILTER: Keep only marker genes with TF binding
#####################################################

cat("Filtering to marker genes with identified TF binding sites...\n\n")

marker_genes_with_tf <- all_marker_genes[all_marker_genes$name %in% genes_with_tf_binding, ]

cat(paste("Marker genes WITH TF binding:", n_distinct(marker_genes_with_tf$name), "\n"))
cat(paste("Marker genes WITHOUT TF binding:", 
          n_distinct(all_marker_genes$name) - n_distinct(marker_genes_with_tf$name), "\n\n"))

# Save the filtered gene list
marker_genes_filtered <- unique(marker_genes_with_tf$name)
write.csv(data.frame(Gene = marker_genes_filtered),
          paste0(enrichment_dir, "/Marker_Genes_With_TF_Binding.csv"),
          row.names = FALSE)

# Also create summary by cluster and comparison
gene_summary <- marker_genes_with_tf %>%
  group_by(Cluster, Comparison) %>%
  summarise(
    N_Genes = n_distinct(name),
    Genes = paste(unique(name), collapse = "; "),
    .groups = "drop"
  )

write.csv(gene_summary,
          paste0(enrichment_dir, "/Marker_Genes_With_TF_By_Cluster.csv"),
          row.names = FALSE)

#####################################################
#####################################################
# STEP 2: CONVERT TO ENTREZ IDs
#####################################################
#####################################################


# Get all unique marker genes with TF binding
genes_for_enrichment <- unique(marker_genes_with_tf$name)

# Convert to Entrez IDs
gene_conversion <- bitr(genes_for_enrichment, 
                        fromType = "SYMBOL", 
                        toType = "ENTREZID", 
                        OrgDb = org.Mm.eg.db)

cat(paste("Successfully converted", nrow(gene_conversion), "of", 
          length(genes_for_enrichment), "genes\n"))
cat(paste("Conversion rate:", 
          round(nrow(gene_conversion)/length(genes_for_enrichment)*100, 1), "%\n\n"))

# Genes that failed conversion
failed_genes <- setdiff(genes_for_enrichment, gene_conversion$SYMBOL)
if(length(failed_genes) > 0) {
  cat("Genes that could not be converted:\n")
  cat(paste(head(failed_genes, 20), collapse = ", "), "\n")
  if(length(failed_genes) > 20) cat("...and", length(failed_genes) - 20, "more\n")
  cat("\n")
}

# Save conversion table
write.csv(gene_conversion,
          paste0(enrichment_dir, "/Gene_Symbol_to_Entrez_Conversion.csv"),
          row.names = FALSE)

# Get Entrez IDs for enrichment
entrez_ids <- gene_conversion$ENTREZID

#####################################################
#####################################################
# STEP 3: GO ENRICHMENT ANALYSIS
#####################################################
#####################################################


#####################################################
# GO Biological Process
#####################################################

cat("Running GO Biological Process enrichment...\n")

go_bp <- enrichGO(
  gene = entrez_ids,
  OrgDb = org.Mm.eg.db,
  ont = "BP",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2,
  readable = TRUE
)

if(!is.null(go_bp) && nrow(go_bp@result) > 0) {
  cat(paste("  Significant terms:", sum(go_bp@result$p.adjust < 0.05), "\n\n"))
  
  # Save results
  write.csv(go_bp@result,
            paste0(enrichment_dir, "/GO_BP_Enrichment.csv"),
            row.names = FALSE)
  
  # Plot top terms
  if(sum(go_bp@result$p.adjust < 0.05) > 0) {
    
    # Dot plot
    pdf(paste0(enrichment_dir, "/GO_BP_Dotplot.pdf"), width = 10, height = 8)
    print(dotplot(go_bp, showCategory = 20) + 
            ggtitle("GO Biological Process Enrichment"))
    dev.off()
    
    # Bar plot
    pdf(paste0(enrichment_dir, "/GO_BP_Barplot.pdf"), width = 10, height = 8)
    print(barplot(go_bp, showCategory = 20) + 
            ggtitle("GO Biological Process Enrichment"))
    dev.off()
    
    cat("  ✓ GO BP plots saved\n\n")
  }
} else {
  cat("  No significant GO BP terms found\n\n")
}

#####################################################
# GO Molecular Function
#####################################################

cat("Running GO Molecular Function enrichment...\n")

go_mf <- enrichGO(
  gene = entrez_ids,
  OrgDb = org.Mm.eg.db,
  ont = "MF",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2,
  readable = TRUE
)

if(!is.null(go_mf) && nrow(go_mf@result) > 0) {
  cat(paste("  Significant terms:", sum(go_mf@result$p.adjust < 0.05), "\n\n"))
  
  write.csv(go_mf@result,
            paste0(enrichment_dir, "/GO_MF_Enrichment.csv"),
            row.names = FALSE)
  
  if(sum(go_mf@result$p.adjust < 0.05) > 0) {
    pdf(paste0(enrichment_dir, "/GO_MF_Dotplot.pdf"), width = 10, height = 8)
    print(dotplot(go_mf, showCategory = 20) + 
            ggtitle("GO Molecular Function Enrichment"))
    dev.off()
    
    pdf(paste0(enrichment_dir, "/GO_MF_Barplot.pdf"), width = 10, height = 8)
    print(barplot(go_mf, showCategory = 20) + 
            ggtitle("GO Molecular Function Enrichment"))
    dev.off()
    
    cat("  ✓ GO MF plots saved\n\n")
  }
} else {
  cat("  No significant GO MF terms found\n\n")
}

#####################################################
# GO Cellular Component
#####################################################

cat("Running GO Cellular Component enrichment...\n")

go_cc <- enrichGO(
  gene = entrez_ids,
  OrgDb = org.Mm.eg.db,
  ont = "CC",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2,
  readable = TRUE
)

if(!is.null(go_cc) && nrow(go_cc@result) > 0) {
  cat(paste("  Significant terms:", sum(go_cc@result$p.adjust < 0.05), "\n\n"))
  
  write.csv(go_cc@result,
            paste0(enrichment_dir, "/GO_CC_Enrichment.csv"),
            row.names = FALSE)
  
  if(sum(go_cc@result$p.adjust < 0.05) > 0) {
    pdf(paste0(enrichment_dir, "/GO_CC_Dotplot.pdf"), width = 10, height = 8)
    print(dotplot(go_cc, showCategory = 20) + 
            ggtitle("GO Cellular Component Enrichment"))
    dev.off()
    
    pdf(paste0(enrichment_dir, "/GO_CC_Barplot.pdf"), width = 10, height = 8)
    print(barplot(go_cc, showCategory = 20) + 
            ggtitle("GO Cellular Component Enrichment"))
    dev.off()
    
    cat("  ✓ GO CC plots saved\n\n")
  }
} else {
  cat("  No significant GO CC terms found\n\n")
}

#####################################################
#####################################################
# STEP 4: KEGG PATHWAY ENRICHMENT
#####################################################
#####################################################


cat("Running KEGG pathway enrichment...\n")

kegg <- enrichKEGG(
  gene = entrez_ids,
  organism = "mmu",
  pvalueCutoff = 0.05,
  qvalueCutoff = 0.2,
  pAdjustMethod = "BH"
)

if(!is.null(kegg) && nrow(kegg@result) > 0) {
  cat(paste("  Significant pathways:", sum(kegg@result$p.adjust < 0.05), "\n\n"))
  
  # Convert gene IDs back to symbols for readability
  kegg_readable <- setReadable(kegg, OrgDb = org.Mm.eg.db, keyType = "ENTREZID")
  
  # Save results
  write.csv(kegg_readable@result,
            paste0(enrichment_dir, "/KEGG_Pathway_Enrichment.csv"),
            row.names = FALSE)
  
  if(sum(kegg@result$p.adjust < 0.05) > 0) {
    
    # Dot plot
    pdf(paste0(enrichment_dir, "/KEGG_Dotplot.pdf"), width = 10, height = 8)
    print(dotplot(kegg_readable, showCategory = 20) + 
            ggtitle("KEGG Pathway Enrichment"))
    dev.off()
    
    # Bar plot
    pdf(paste0(enrichment_dir, "/KEGG_Barplot.pdf"), width = 10, height = 8)
    print(barplot(kegg_readable, showCategory = 20) + 
            ggtitle("KEGG Pathway Enrichment"))
    dev.off()
    
    cat("  ✓ KEGG plots saved\n\n")
  }
} else {
  cat("  No significant KEGG pathways found\n\n")
}

#####################################################
#####################################################
# STEP 5: CLUSTER-SPECIFIC ENRICHMENT
#####################################################
#####################################################


# Create subdirectory for cluster-specific results
cluster_dir <- paste0(enrichment_dir, "/By_Cluster")
if(!dir.exists(cluster_dir)) dir.create(cluster_dir, recursive = TRUE)

# Get clusters with sufficient genes
cluster_gene_counts <- marker_genes_with_tf %>%
  group_by(Cluster) %>%
  summarise(N_Genes = n_distinct(name), .groups = "drop") %>%
  filter(N_Genes >= 10) %>%  # At least 10 genes for meaningful enrichment
  arrange(desc(N_Genes))

cat(paste("Clusters with ≥10 genes:", nrow(cluster_gene_counts), "\n\n"))

if(nrow(cluster_gene_counts) > 0) {
  
  for(i in 1:nrow(cluster_gene_counts)) {
    
    cluster <- cluster_gene_counts$Cluster[i]
    n_genes <- cluster_gene_counts$N_Genes[i]
    
    cat(paste("Processing", cluster, "(", n_genes, "genes)...\n"))
    
    # Get genes for this cluster
    cluster_genes <- unique(marker_genes_with_tf$name[marker_genes_with_tf$Cluster == cluster])
    
    # Convert to Entrez IDs
    cluster_conversion <- bitr(cluster_genes, 
                               fromType = "SYMBOL", 
                               toType = "ENTREZID", 
                               OrgDb = org.Mm.eg.db)
    
    cluster_entrez <- cluster_conversion$ENTREZID
    
    cat(paste("  Converted", length(cluster_entrez), "genes\n"))
    
    if(length(cluster_entrez) >= 5) {  # Need at least 5 for enrichment
      
      # GO BP enrichment
      cluster_go_bp <- enrichGO(
        gene = cluster_entrez,
        OrgDb = org.Mm.eg.db,
        ont = "BP",
        pAdjustMethod = "BH",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        readable = TRUE
      )
      
      if(!is.null(cluster_go_bp) && sum(cluster_go_bp@result$p.adjust < 0.05) > 0) {
        write.csv(cluster_go_bp@result,
                  paste0(cluster_dir, "/", cluster, "_GO_BP.csv"),
                  row.names = FALSE)
        
        pdf(paste0(cluster_dir, "/", cluster, "_GO_BP_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(cluster_go_bp, showCategory = 15) + 
                ggtitle(paste(cluster, "- GO BP Enrichment")))
        dev.off()
        
        cat(paste("  ✓", sum(cluster_go_bp@result$p.adjust < 0.05), "significant GO BP terms\n"))
      }
      
      # KEGG enrichment
      cluster_kegg <- enrichKEGG(
        gene = cluster_entrez,
        organism = "mmu",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        pAdjustMethod = "BH"
      )
      
      if(!is.null(cluster_kegg) && sum(cluster_kegg@result$p.adjust < 0.05) > 0) {
        cluster_kegg_readable <- setReadable(cluster_kegg, 
                                             OrgDb = org.Mm.eg.db, 
                                             keyType = "ENTREZID")
        
        write.csv(cluster_kegg_readable@result,
                  paste0(cluster_dir, "/", cluster, "_KEGG.csv"),
                  row.names = FALSE)
        
        pdf(paste0(cluster_dir, "/", cluster, "_KEGG_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(cluster_kegg_readable, showCategory = 15) + 
                ggtitle(paste(cluster, "- KEGG Pathways")))
        dev.off()
        
        cat(paste("  ✓", sum(cluster_kegg@result$p.adjust < 0.05), "significant KEGG pathways\n"))
      }
    }
    
    cat("\n")
  }
}

#####################################################
#####################################################
# STEP 6: COMPARISON-BY-CLUSTER ENRICHMENT
#####################################################
#####################################################

# Create subdirectory
comp_cluster_dir <- paste0(enrichment_dir, "/By_Comparison_and_Cluster")
if(!dir.exists(comp_cluster_dir)) dir.create(comp_cluster_dir, recursive = TRUE)

# Get all unique comparison-cluster combinations
comp_cluster_combos <- marker_genes_with_tf %>%
  group_by(Comparison, Cluster) %>%
  summarise(N_Genes = n_distinct(name), .groups = "drop") %>%
  filter(N_Genes >= 5) %>%  # At least 5 genes for enrichment
  arrange(Comparison, Cluster)

cat(paste("Comparison-cluster combinations with ≥5 genes:", nrow(comp_cluster_combos), "\n\n"))

if(nrow(comp_cluster_combos) > 0) {
  
  for(i in 1:nrow(comp_cluster_combos)) {
    
    comparison <- comp_cluster_combos$Comparison[i]
    cluster <- comp_cluster_combos$Cluster[i]
    n_genes <- comp_cluster_combos$N_Genes[i]
    
    # Clean names for filenames
    comp_clean <- gsub(" ", "", comparison)
    
    cat(paste("Processing", comparison, "-", cluster, "(", n_genes, "genes)...\n"))
    
    # Get genes for this specific comparison-cluster combination
    combo_genes <- unique(marker_genes_with_tf$name[
      marker_genes_with_tf$Comparison == comparison & 
        marker_genes_with_tf$Cluster == cluster
    ])
    
    # Convert to Entrez IDs
    combo_conversion <- bitr(combo_genes, 
                             fromType = "SYMBOL", 
                             toType = "ENTREZID", 
                             OrgDb = org.Mm.eg.db)
    
    combo_entrez <- combo_conversion$ENTREZID
    
    cat(paste("  Converted", length(combo_entrez), "genes\n"))
    
    if(length(combo_entrez) >= 5) {
      
      # GO BP enrichment
      combo_go_bp <- enrichGO(
        gene = combo_entrez,
        OrgDb = org.Mm.eg.db,
        ont = "BP",
        pAdjustMethod = "BH",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        readable = TRUE
      )
      
      if(!is.null(combo_go_bp) && sum(combo_go_bp@result$p.adjust < 0.05) > 0) {
        # Save CSV
        write.csv(combo_go_bp@result,
                  paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_GO_BP.csv"),
                  row.names = FALSE)
        
        # Save plot
        pdf(paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_GO_BP_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(combo_go_bp, showCategory = 15) + 
                ggtitle(paste(comparison, "-", cluster, "\nGO BP Enrichment")))
        dev.off()
        
        cat(paste("  ✓", sum(combo_go_bp@result$p.adjust < 0.05), "significant GO BP terms\n"))
      } else {
        cat("  No significant GO BP terms\n")
      }
      
      # GO MF enrichment
      combo_go_mf <- enrichGO(
        gene = combo_entrez,
        OrgDb = org.Mm.eg.db,
        ont = "MF",
        pAdjustMethod = "BH",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        readable = TRUE
      )
      
      if(!is.null(combo_go_mf) && sum(combo_go_mf@result$p.adjust < 0.05) > 0) {
        write.csv(combo_go_mf@result,
                  paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_GO_MF.csv"),
                  row.names = FALSE)
        
        pdf(paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_GO_MF_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(combo_go_mf, showCategory = 15) + 
                ggtitle(paste(comparison, "-", cluster, "\nGO MF Enrichment")))
        dev.off()
        
        cat(paste("  ✓", sum(combo_go_mf@result$p.adjust < 0.05), "significant GO MF terms\n"))
      }
      
      # GO CC enrichment
      combo_go_cc <- enrichGO(
        gene = combo_entrez,
        OrgDb = org.Mm.eg.db,
        ont = "CC",
        pAdjustMethod = "BH",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        readable = TRUE
      )
      
      if(!is.null(combo_go_cc) && sum(combo_go_cc@result$p.adjust < 0.05) > 0) {
        write.csv(combo_go_cc@result,
                  paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_GO_CC.csv"),
                  row.names = FALSE)
        
        pdf(paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_GO_CC_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(combo_go_cc, showCategory = 15) + 
                ggtitle(paste(comparison, "-", cluster, "\nGO CC Enrichment")))
        dev.off()
        
        cat(paste("  ✓", sum(combo_go_cc@result$p.adjust < 0.05), "significant GO CC terms\n"))
      }
      
      # KEGG enrichment
      combo_kegg <- enrichKEGG(
        gene = combo_entrez,
        organism = "mmu",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        pAdjustMethod = "BH"
      )
      
      if(!is.null(combo_kegg) && sum(combo_kegg@result$p.adjust < 0.05) > 0) {
        combo_kegg_readable <- setReadable(combo_kegg, 
                                           OrgDb = org.Mm.eg.db, 
                                           keyType = "ENTREZID")
        
        # Save CSV
        write.csv(combo_kegg_readable@result,
                  paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_KEGG.csv"),
                  row.names = FALSE)
        
        # Save plot
        pdf(paste0(comp_cluster_dir, "/", comp_clean, "_", cluster, "_KEGG_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(combo_kegg_readable, showCategory = 15) + 
                ggtitle(paste(comparison, "-", cluster, "\nKEGG Pathways")))
        dev.off()
        
        cat(paste("  ✓", sum(combo_kegg@result$p.adjust < 0.05), "significant KEGG pathways\n"))
      } else {
        cat("  No significant KEGG pathways\n")
      }
    }
    
    cat("\n")
  }
  
  cat(paste("Total comparison-cluster combinations analyzed:", nrow(comp_cluster_combos), "\n\n"))
}

#####################################################
#####################################################
# STEP 7: COMPARISON-SPECIFIC ENRICHMENT (ALL CLUSTERS COMBINED)
#####################################################
#####################################################

cat("\n========================================\n")
cat("COMPARISON-SPECIFIC ENRICHMENT ANALYSIS\n")
cat("(All clusters combined per comparison)\n")
cat("========================================\n\n")

# Create subdirectory
comparison_dir <- paste0(enrichment_dir, "/By_Comparison")
if(!dir.exists(comparison_dir)) dir.create(comparison_dir, recursive = TRUE)

# Get comparisons with sufficient genes
comparison_gene_counts <- marker_genes_with_tf %>%
  group_by(Comparison) %>%
  summarise(N_Genes = n_distinct(name), .groups = "drop") %>%
  filter(N_Genes >= 10) %>%
  arrange(desc(N_Genes))

cat(paste("Comparisons with ≥10 genes:", nrow(comparison_gene_counts), "\n\n"))

if(nrow(comparison_gene_counts) > 0) {
  
  for(i in 1:nrow(comparison_gene_counts)) {
    
    comparison <- comparison_gene_counts$Comparison[i]
    n_genes <- comparison_gene_counts$N_Genes[i]
    
    # Clean comparison name for filenames
    comp_clean <- gsub(" ", "", comparison)
    
    cat(paste("Processing", comparison, "(", n_genes, "genes)...\n"))
    
    # Get genes for this comparison
    comp_genes <- unique(marker_genes_with_tf$name[marker_genes_with_tf$Comparison == comparison])
    
    # Convert to Entrez IDs
    comp_conversion <- bitr(comp_genes, 
                            fromType = "SYMBOL", 
                            toType = "ENTREZID", 
                            OrgDb = org.Mm.eg.db)
    
    comp_entrez <- comp_conversion$ENTREZID
    
    cat(paste("  Converted", length(comp_entrez), "genes\n"))
    
    if(length(comp_entrez) >= 5) {
      
      # GO BP enrichment
      comp_go_bp <- enrichGO(
        gene = comp_entrez,
        OrgDb = org.Mm.eg.db,
        ont = "BP",
        pAdjustMethod = "BH",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        readable = TRUE
      )
      
      if(!is.null(comp_go_bp) && sum(comp_go_bp@result$p.adjust < 0.05) > 0) {
        write.csv(comp_go_bp@result,
                  paste0(comparison_dir, "/", comp_clean, "_GO_BP.csv"),
                  row.names = FALSE)
        
        pdf(paste0(comparison_dir, "/", comp_clean, "_GO_BP_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(comp_go_bp, showCategory = 15) + 
                ggtitle(paste(comparison, "- GO BP Enrichment")))
        dev.off()
        
        cat(paste("  ✓", sum(comp_go_bp@result$p.adjust < 0.05), "significant GO BP terms\n"))
      }
      
      # KEGG enrichment
      comp_kegg <- enrichKEGG(
        gene = comp_entrez,
        organism = "mmu",
        pvalueCutoff = 0.05,
        qvalueCutoff = 0.2,
        pAdjustMethod = "BH"
      )
      
      if(!is.null(comp_kegg) && sum(comp_kegg@result$p.adjust < 0.05) > 0) {
        comp_kegg_readable <- setReadable(comp_kegg, 
                                          OrgDb = org.Mm.eg.db, 
                                          keyType = "ENTREZID")
        
        write.csv(comp_kegg_readable@result,
                  paste0(comparison_dir, "/", comp_clean, "_KEGG.csv"),
                  row.names = FALSE)
        
        pdf(paste0(comparison_dir, "/", comp_clean, "_KEGG_Dotplot.pdf"), 
            width = 10, height = 8)
        print(dotplot(comp_kegg_readable, showCategory = 15) + 
                ggtitle(paste(comparison, "- KEGG Pathways")))
        dev.off()
        
        cat(paste("  ✓", sum(comp_kegg@result$p.adjust < 0.05), "significant KEGG pathways\n"))
      }
    }
    
    cat("\n")
  }
}

#####################################################
#####################################################
# FINAL SUMMARY
#####################################################
#####################################################

cat("SUMMARY:\n")
cat("========\n")
cat(paste("Total marker genes with TF binding:", length(marker_genes_filtered), "\n"))
cat(paste("Genes converted for enrichment:", nrow(gene_conversion), "\n"))
cat(paste("Clusters analyzed:", nrow(cluster_gene_counts), "\n"))
cat(paste("Comparisons analyzed:", nrow(comparison_gene_counts), "\n"))
cat(paste("Comparison-cluster combinations analyzed:", nrow(comp_cluster_combos), "\n\n"))

cat("OUTPUT DIRECTORY:\n")
cat(paste(enrichment_dir, "\n\n"))

cat("FILES GENERATED:\n")
cat("================\n\n")

cat("1. OVERALL ENRICHMENT (all genes combined):\n")
cat("   Location: ", enrichment_dir, "/\n")
cat("   • GO_BP_Enrichment.csv & plots\n")
cat("   • GO_MF_Enrichment.csv & plots\n")
cat("   • GO_CC_Enrichment.csv & plots\n")
cat("   • KEGG_Pathway_Enrichment.csv & plots\n\n")

cat("2. BY CLUSTER (all comparisons within each cluster combined):\n")
cat("   Location: ", enrichment_dir, "/By_Cluster/\n")
cat("   • [Cluster]_GO_BP.csv & plots\n")
cat("   • [Cluster]_KEGG.csv & plots\n")
cat("   Example: C6_GO_BP.csv (all comparisons in cluster C6)\n\n")

cat("3. BY COMPARISON AND CLUSTER ⭐ MOST SPECIFIC:\n")
cat("   Location: ", enrichment_dir, "/By_Comparison_and_Cluster/\n")
cat("   • [Comparison]_[Cluster]_GO_BP.csv & plots\n")
cat("   • [Comparison]_[Cluster]_GO_MF.csv & plots\n")
cat("   • [Comparison]_[Cluster]_GO_CC.csv & plots\n")
cat("   • [Comparison]_[Cluster]_KEGG.csv & plots\n")
cat("   Examples:\n")
cat("     - sample1vssample2_C6_GO_BP.csv (sample1 vs sample2 in cluster C6)\n")
cat("     - sample1vssample3_C12_KEGG.csv (sample1 vs sample3 in cluster C12)\n\n")

cat("4. BY COMPARISON (all clusters within each comparison combined):\n")
cat("   Location: ", enrichment_dir, "/By_Comparison/\n")
cat("   • [Comparison]_GO_BP.csv & plots\n")
cat("   • [Comparison]_KEGG.csv & plots\n")
cat("   Example: sample1vssample2_GO_BP.csv (sample1 vs sample2 across all clusters)\n\n")

cat("REFERENCE FILES:\n")
cat("  • Marker_Genes_With_TF_Binding.csv (gene list used)\n")
cat("  • Marker_Genes_With_TF_By_Cluster.csv (summary)\n")
cat("  • Gene_Symbol_to_Entrez_Conversion.csv\n\n")

cat("Analysis complete!\n")
